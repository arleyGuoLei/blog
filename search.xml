<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Javascript的String对象整理</title>
      <link href="/Javascript%E7%9A%84String%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/"/>
      <url>/Javascript%E7%9A%84String%E5%AF%B9%E8%B1%A1%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h4><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>length</td><td>　字符串的长度</td></tr><tr><td>prototype</td><td>给对象添加属性和方法</td></tr><tr><td>constructor</td><td>对创建该对象的函数的引用(没研究)</td></tr></tbody></table><h4 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h4><table><thead><tr><th>方法(-)</th><th>描述</th></tr></thead><tbody><tr><td>charAt</td><td>返回字符串第n-1个字符,从0开始</td></tr><tr><td>charCodeAt()</td><td>同上,返回字符的 Unicode 编码</td></tr><tr><td>concat</td><td>新串 = 老串1.concat(老串2)</td></tr><tr><td>fromCharCode</td><td>字符 = fromCharCode(Unicode 编码)</td></tr><tr><td>indexOf</td><td>str.indexOf(“xxx”) 返回xxx在str中串首字母出现的位置,从0开始记,没有返回-1</td></tr><tr><td>lastIndexOf</td><td>从后往前找,indexOf从前往后,在串第一个字都是0</td></tr><tr><td>search</td><td>类似indexOf,search可传入正则,所需资源更多</td></tr><tr><td>match</td><td>查找找到一个或多个正则表达式的匹配。</td></tr><tr><td>replace</td><td>str.replace(“老串里的字符”,”替换成的字符”);</td></tr><tr><td>slice</td><td>str.slice(start,end) “hello”.slice(1,3) = “el”</td></tr><tr><td>split</td><td>将字符串分割成数组 数组 = 字符串.split(“分隔符”)</td></tr><tr><td>substr</td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td>substring</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><h4 id="slice、substr、substring区别"><a href="#slice、substr、substring区别" class="headerlink" title="slice、substr、substring区别"></a>slice、substr、substring区别</h4><ul><li>正数参数含义上的区别</li></ul><pre><code class="js">var strValue = &quot;javascript programing&quot;;//都是从0开始数,然后截取strValue.slice(3)//&quot;ascript programing&quot;strValue.substring(3)//&quot;ascript programing&quot;strValue.substr(3)//&quot;ascript programing&quot;//开始和结束位置strValue.slice(3,13)//&quot;ascript pr&quot;strValue.substring(3,13)//&quot;ascript pr&quot;// 第二个参数是截取的长度strValue.substr(3,13)//&quot;ascript progr&quot;</code></pre><ul><li>负数参数含义上的区别</li></ul><pre><code class="js">var strValue = &quot;javascript programing&quot;;strValue.slice(-3) =&gt; strValue.slice(18) //&quot;ing&quot;strValue.substr(-3) =&gt; strValue.substr(18)//&quot;ing&quot;strValue.substring(-3) =&gt; strValue.substring(0)//&quot;javascript programing&quot;strValue.slice(3,-13) =&gt; strValue.slice(3,8)//&quot;ascri&quot; strValue.substr(3,-13) =&gt; strValue.substr(3,0)//“”strValue.substring(3,-13) =&gt; strValue.substring(0,3)//&quot;jav&quot;</code></pre><h5 id="substring自身对比"><a href="#substring自身对比" class="headerlink" title="substring自身对比"></a>substring自身对比</h5><pre><code class="js">//都是从0开始数//从第三个字符截取到最后&quot;hello&quot;.substring(3);&gt; &quot;lo&quot;//截取第3个字符以前的&quot;hello&quot;.substring(3,-1);&gt; &quot;hel&quot;</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript DOM and BOM 整理</title>
      <link href="/Javascript-DOM-and-BOM-%E6%95%B4%E7%90%86/"/>
      <url>/Javascript-DOM-and-BOM-%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>id: <code>document.getElementById(&quot;xxxx&quot;);</code></p><blockquote><p>getElementById</p></blockquote><p>标签名: <code>document.getElementsByTagName(&quot;p&quot;);</code></p><blockquote><p>getElementsByTagName</p></blockquote><p>类名: <code>document.getElementsByClassName(&quot;intro&quot;);</code></p><blockquote><p>getElementsByClassName</p></blockquote><p>NodeList对象: <code>document.querySelectorAll(&quot;p&quot;);</code></p><blockquote><p>querySelectorAll</p></blockquote><h4 id="操作HTML"><a href="#操作HTML" class="headerlink" title="操作HTML"></a>操作HTML</h4><ul><li><p>改变 HTML 输出流: <code>document.write()</code></p></li><li><p>改变 HTML 内容: <code>document.getElementById(id).innerHTML=新的 HTML</code></p><blockquote><p>innerHTML</p></blockquote></li><li><p>改变 HTML 属性: <code>document.getElementById(id).attribute=新属性值</code></p><blockquote><p>document.getElementById(“image”).src=”landscape.jpg”;</p></blockquote></li></ul><h4 id="操作CSS"><a href="#操作CSS" class="headerlink" title="操作CSS"></a>操作CSS</h4><p>改变样式: <code>document.getElementById(id).style.property=新样式</code></p><blockquote><p>document.getElementById(“p2”).style.color=”blue”;</p></blockquote><h4 id="DOM事件-略"><a href="#DOM事件-略" class="headerlink" title="DOM事件(略)"></a>DOM事件(略)</h4><ul><li><p>点击: <code>onclick</code></p><blockquote><p>\</p><h1 onclick="this.innerHTML='Ooops!'">点击文本!\</h1><br>\<button onclick="displayDate()">点这里\</button><br>document.getElementById(“myBtn”).onclick=function(){displayDate()};<p></p></blockquote></li><li><p>HTML DOM EventListener</p><blockquote><p>使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。</p></blockquote></li></ul><pre><code class="js">element.addEventListener(&quot;mouseover&quot;, myFunction);element.addEventListener(&quot;click&quot;, mySecondFunction);element.addEventListener(&quot;mouseout&quot;, myThirdFunction);//删除监听element.removeEventListener(&quot;mousemove&quot;, myFunction);//传递参数element.addEventListener(&quot;click&quot;, function(){ myFunction(p1, p2); });</code></pre><blockquote><p>DOM参考手册 :<a href="http://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">http://www.runoob.com/jsref/dom-obj-event.html</a> (菜鸟教程)</p></blockquote><h4 id="JavaScript-HTML-DOM-元素-节点-创建标签"><a href="#JavaScript-HTML-DOM-元素-节点-创建标签" class="headerlink" title="JavaScript HTML DOM 元素 (节点) - 创建标签"></a>JavaScript HTML DOM 元素 (节点) - 创建标签</h4><ul><li>创建新的 HTML 元素 (节点) - appendChild()</li></ul><pre><code class="html">&lt;div id=&quot;div1&quot;&gt;&lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;&lt;p id=&quot;p2&quot;&gt;这是另外一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt;//创建 &lt;p&gt; 元素:var para = document.createElement(&quot;p&quot;);// 为 &lt;p&gt; 元素添加文本节点：var node = document.createTextNode(&quot;这是一个新的段落。&quot;);//将文本节点添加到 &lt;p&gt; 元素中：para.appendChild(node);var element = document.getElementById(&quot;div1&quot;);//添加到已存在的元素中:element.appendChild(para);// // element.insertBefore(插入的内容, 插入到哪个元素之前);&lt;/script&gt;</code></pre><p><code>createElement</code>,<code>createTextNode</code>,<code>appendChild</code>,<br><code>insertBefore()</code></p><ul><li>移除已存在的元素<br><code>`</code>html<div id="div1"><br><p id="p1">这是一个段落。</p><br><p id="p2">这是另外一个段落。</p><br></div></li></ul><p><script><br>var parent = document.getElementById(“div1”);<br>var child = document.getElementById(“p1”);<br>//父元素里面移除子元素<br>parent.removeChild(child);<br></script></p><pre><code>* 替换 HTML 元素 - replaceChild()```html&lt;div id=&quot;div1&quot;&gt;&lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;&lt;p id=&quot;p2&quot;&gt;这是另外一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var para = document.createElement(&quot;p&quot;);var node = document.createTextNode(&quot;这是一个新的段落。&quot;);para.appendChild(node);var parent = document.getElementById(&quot;div1&quot;);var child = document.getElementById(&quot;p1&quot;);//父元素.replaceChild(新元素,老元素)parent.replaceChild(para, child);&lt;/script&gt;</code></pre><ul><li>HTMLCollection 对象 length 属性</li></ul><pre><code class="js">var myCollection = document.getElementsByTagName(&quot;p&quot;);var i;for (i = 0; i &lt; myCollection.length; i++) {    myCollection[i].style.backgroundColor = &quot;red&quot;;}</code></pre><blockquote><p>HTMLCollection 不是一个数组！<br>HTMLCollection 看起来可能是一个数组，但其实不是。<br>你可以像数组一样，使用索引来获取元素。<br>HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p></blockquote><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p><code>windows</code>,<code>screen</code>,<code>location</code>,<code>navigator</code></p><p><img src="https://i.loli.net/2018/09/25/5ba9cb4025add.png" alt="localtion"></p><p><img src="https://i.loli.net/2018/09/25/5ba9cbf37d9dc.png" alt="navigator"></p><p><code>confirm</code>,<code>alert</code>,<code>prompt</code></p><p><code>setInterval()</code>,<code>clearInterval()</code>,<code>setTimeout()</code></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js正则表达式</title>
      <link href="/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>ECMAScript通过RegExp类型支持正则表达式，如下：</p><p><code>var expression = /pattern/flags;</code></p><p>其中的模式（<code>pattern</code>）部分可以是任何简单或者复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式可带有一个或者多个标注（<code>flags</code>）,用以标明正则表达式的行为。有三个一下标志：<br><code>g</code>：表示全局模式,即模式将被应用到所有字符串，而非在发现第一个匹配项时立即停止。<br><code>i</code>：表示不区分大小写模式。<br><code>m</code>：表示多行模式，即在到达一行文本末尾时还在继续查找下一行中是否存在于模式匹配的项。</p><h4 id="正则表达式定义方式"><a href="#正则表达式定义方式" class="headerlink" title="正则表达式定义方式"></a>正则表达式定义方式</h4><ol><li>匹配abd或者abc 不区分大小写模式</li></ol><p><code>var pattern = /a[bc]d/i;</code><br>等同于 =&gt;<br><code>var pattern = new RegExp(&quot;a[bc]d&quot;,&quot;i&quot;);</code></p><pre><code class="js">var pattern = /a[bc]d/i;//等价于下var text = &quot;00acd00abcd00&quot;;var r = pattern.test(text);console.log(r); //truepattern = new RegExp(&quot;a[bc]d&quot;,&quot;i&quot;);//等价于上var r = pattern.test(text);console.log(r); //true</code></pre><h4 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h4><h5 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h5><blockquote><p>正则表达式常用方法test()，它接受一个字符串参数。在模式与该参数匹配的情况下返回true，否则返回false。</p></blockquote><p>用法：<code>正则.test(字符串)</code></p><pre><code class="js">var text =&quot;000-00-0000&quot;;var pattern = /\d{3}-\d{2}-\d{4}/;if(pattern.test(text)){    console.log(&#39;the pattern was matched.&#39;);}</code></pre><h5 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a>search()方法</h5><blockquote><p>在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</p></blockquote><p>用法用法：<code>字符串.search(正则)</code></p><p>例子用法：<code>字符串.search(正则)</code>不区分大小写</p><pre><code class="js用法：">var text = &quot;0123456bbbbbbccc&quot;;var re = /b/i;r = text.search(re);document.write(r);// 7 </code></pre><h5 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h5><blockquote><p>获取正则匹配到的结果，以数组的形式返回</p></blockquote><p>用法：<code>字符串.match(正则)</code></p><pre><code class="js">r = &quot;186a619b28&quot;.match(/\d+/g);for (const key in r) {  if (r.hasOwnProperty(key)) {    const element = r[key];    document.write(element+&quot;&lt;br&gt;&quot;);  }}/*18661928*/</code></pre><h5 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h5><p>replace 本身是JavaScript字符串对象的一个方法，它允许接收两个参数：<br><code>replace([RegExp|String],[String|Function])</code></p><ul><li>第1个参数可以是一个普通的字符串或是一个正则表达式.</li><li>第2个参数可以是一个普通的字符串或是一个回调函数.</li></ul><blockquote><p>如果第2个参数是回调函数，每匹配到一个结果就回调一次，每次回调都会传递以下参数：</p><ol><li>result: 本次匹配到的结果</li><li>1,…9: 正则表达式中有几个()，就会传递几个参数，1 9分别代表本次匹配中每个()提取的结果，最多9个</li><li>offset:记录本次匹配的开始位置</li><li>source:接受匹配的原始字符串</li></ol></blockquote><p><strong>以下是replace和JS正则搭配使用的几个常见经典案例：</strong><br>（1）实现字符串的trim函数，去除字符串两边的空格</p><pre><code class="js">String.prototype.trim = function(){  /**   * @param rs：匹配结果   * @param $1:第1个()提取结果   * @param $2:第2个()提取结果   * @param offset:匹配开始位置   * @param source：原始字符串   */  this.replace(/(^\s+)|(\s+$)/g,function(rs,$1,$2,offset,source){    //arguments中的每个元素对应一个参数    console.log(arguments);  });};&quot; abcd &quot;.trim();/*[&quot; &quot;, &quot; &quot;, undefined, 0, &quot; abcd &quot;] //第1次匹配结果[&quot; &quot;, undefined, &quot; &quot;, 5, &quot; abcd &quot;] //第2次匹配结果*/</code></pre><blockquote><p>^s+ 表示以空格开头的连续空白字符，s+$ 表示以空格结尾的连续空白字符，加上() 就是将匹配到的结果提取出来，由于是 | 的关系，因此这个表达式最多会match到两个结果集，然后执行两次替换：</p></blockquote><p>（2）提取浏览器url中的参数名和参数值，生成一个key/value的对象</p><pre><code class="js">String.prototype.getUrlParamObj = function(){  var obj = new Array;  var i = 0;  this.replace(/([^?&amp;=]+)=([^&amp;=]*)/gi,function(rs,$1,$2){    obj[$1] = $2;    i++;  });  return obj;}var re = &quot;i7xy.cn?id=1&amp;a=1&amp;b=2&amp;c=3&quot;.getUrlParamObj();console.log(re);// [a: &quot;1&quot;, b: &quot;2&quot;, c: &quot;3&quot;]</code></pre><p>（3）在字符串指定位置插入新字符串</p><pre><code class="js">String.prototype.insetAt = function(str,offset){  //使用RegExp()构造函数创建正则表达式  var regx = new RegExp(&quot;(.{&quot;+offset+&quot;})&quot;);  return this.replace(regx,&quot;$1&quot;+str);};&quot;abcd&quot;.insetAt(&#39;xyz&#39;,2); //在b和c之间插入xyz//结果 &quot;abxyzcd&quot;</code></pre><blockquote><p>当offset=2时，正则表达式为：(^.{2}) .表示除\n之外的任意字符，后面加{2} 就是匹配以数字或字母组成的前两个连续字符，加()就会将匹配到的结果提取出来，然后通过replace将匹配到的结果替换为新的字符串，形如：结果=结果+str</p></blockquote><p>（4）将手机号12988886666转化成129 8888 6666</p><pre><code class="js">function phoneSoup(str) {  var p = null;  str.replace(/(\d{3})(\d{4})(\d{4})/, function (re, $1, $2, $3) {    p = $1 + &quot; &quot; + $2 + &quot; &quot; + $3;  })  return p;}//格式化为 xxx xxxx xxxxvar phone = &quot;18287712345&quot;console.log(phoneSoup(phone));//182 8771 2345</code></pre><p>（5）replace()方法全局替换变量<br><code>简单替换字符：string.replace(&quot;a&quot;,&quot;b&quot;); （把 a 替换成 b）</code><br><code>全局替换字符：string.replace(/a/g,&quot;b&quot;);（全局把a替换成b）</code></p><p>但是如果是全局替换一个变量内容，如下,给一个电话号码中间加*号：</p><pre><code class="js">function phoneSoup(str) {  var p = null;  str.replace(/(\d{3})(\d{4})(\d{4})/, function (re, $1, $2, $3) {    p = $1 + &quot;****&quot; + $3;  })  return p;}//格式化为 xxx****xxxxvar phone = &quot;18287712345&quot;console.log(phoneSoup(phone));</code></pre><p><code>正则.test(字符串)</code><br><code>字符串.search(正则)</code><br><code>字符串.match(正则)</code><br><code>字符串.replace(正则,[字符串]或[函数])</code></p><pre><code class="js">匹配第一个bat或者cat,不区分大小写： /[bc]at/i 或者 new RegExp(&quot;[bc]at&quot;,&quot;i&quot;);匹配所有以&quot;at&quot;结尾的3个字符组合，不区分大小写：/.at/gi;只能输入数字：^[0-9]*$;只能输入n位的数字：^\d{n}$只能输入至少n位的数字：^\d{n,}$只能输入m~n位的数字：^\d{m,n}$只能输入零和非零开头的数字：^(0|[1-9][0-9]*)$只能输入有两位小数的正实数：^[0-9]+(.[0-9]{2})?$只能输入有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$只能输入非零的正整数：^\+?[1-9][0-9]*$只能输入长度为3的字符：^.{3}$只能输入由26个英文字母组成的字符串：^[A-Za-z]+$只能输入由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$只能输入由数字、26个英文字母或者下划线组成的字符串：^\w+$验证用户密码：以字母开头，长度在6~18之间，只能包含字符、数字和下划线：^[a-zA-Z]\w{5,17}$验证是否含有^%&amp;&#39;,;=?$&quot;等字符：[^%&amp;&#39;,;=?$\x22]+只能输入汉字：^[\u4e00-\u9fa5]{0,}$验证Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$验证身份证号（15位或18位数字）：^\d{15}|\d{18}$验证IP地址：^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$匹配两个两个重叠出现的字符 例如，&quot;aabbc11asd&quot;， 返回结果为aa bb 11三组match：(\w)\1匹配成对的HTML标签：&lt;(?&lt;tag&gt;[^\s&gt;]+)[^&gt;]*&gt;.*&lt;/\k&lt;tag&gt;&gt;匹配1-58之间的数字：/^([1-9]|[1-5][0-8])$/匹配 -90至90之间的整数（包括-90和90）：^(-?[1-8][0-9]|-?[1-9]|-?90|0)$匹配收尾空白字符：^\s+|\s+$</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript var let const区别总结</title>
      <link href="/Javascript-var-let-const%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93/"/>
      <url>/Javascript-var-let-const%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="var、let、const的区别"><a href="#var、let、const的区别" class="headerlink" title="var、let、const的区别"></a>var、let、const的区别</h4><ol><li><p>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</p></li><li><p>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</p></li><li><p>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</p></li></ol><pre><code class="js">&lt;script type=&quot;text/javascript&quot;&gt;    // 块作用域    {        var a = 1;        let b = 2;        const c = 3;        // c = 4; // 报错        var aa;        let bb;        // const cc; // 报错        console.log(a); // 1        console.log(b); // 2        console.log(c); // 3        console.log(aa); // undefined        console.log(bb); // undefined    }    console.log(a); // 1    // console.log(b); // 报错    // console.log(c); // 报错    // 函数作用域    (function A() {        var d = 5;        let e = 6;        const f = 7;        console.log(d); // 5        console.log(e); // 6  (在同一个{ }中,也属于同一个块，可以正常访问到)        console.log(f); // 7  (在同一个{ }中,也属于同一个块，可以正常访问到)    })();    // console.log(d); // 报错    // console.log(e); // 报错    // console.log(f); // 报错&lt;/script&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Css - BFC 神奇背后的原理</title>
      <link href="/Css-BFC-%E7%A5%9E%E5%A5%87%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/Css-BFC-%E7%A5%9E%E5%A5%87%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="BFC是什么？"><a href="#BFC是什么？" class="headerlink" title="BFC是什么？"></a>BFC是什么？</h4><h5 id="在一个Web页面的CSS渲染中，块级格式化上下文-Block-Fromatting-Context-是按照块级盒子布局的。W3C对BFC的定义如下："><a href="#在一个Web页面的CSS渲染中，块级格式化上下文-Block-Fromatting-Context-是按照块级盒子布局的。W3C对BFC的定义如下：" class="headerlink" title="在一个Web页面的CSS渲染中，块级格式化上下文 (Block Fromatting Context)是按照块级盒子布局的。W3C对BFC的定义如下："></a>在一个Web页面的CSS渲染中，块级格式化上下文 (Block Fromatting Context)是按照块级盒子布局的。W3C对BFC的定义如下：</h5><p>浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</p><h5 id="为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可："><a href="#为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：" class="headerlink" title="为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可："></a>为了便于理解，我们换一种方式来重新定义BFC。一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：</h5><p>1、<code>float</code>的值不是<code>none</code>。<br>2、<code>position</code>的值不是<code>static</code>或者<code>relative</code>。<br>3、<code>display</code>的值是<code>inline-block</code>、<code>table-cell</code>、<code>flex</code>、<code>table-caption</code>或者<code>inline-flex</code><br>4、<code>overflow</code>的值不是<code>visible</code></p><p><strong>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</strong></p><blockquote><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<code>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</code></p></blockquote><h4 id="BFC的作用及原理"><a href="#BFC的作用及原理" class="headerlink" title="BFC的作用及原理"></a>BFC的作用及原理</h4><ol><li>自适应两栏布局</li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;BFC&lt;/title&gt;  &lt;style&gt;    .aside {      width: 100px;      height: 150px;      /* 生成第一个BFC */      float: left;      background: #f66;    }    .main {      height: 200px;      background: #fcc;    }    .text-2&gt;.main {      /* 通过overflow 也生成BFC */      /* overflow: hidden;  */      overflow: hidden;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;text-1&quot;&gt;    &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;text-2&quot;&gt;    &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/22/5ba654c70cbf9.png" alt="未设置"></p><p><img src="https://i.loli.net/2018/09/22/5ba654dae125a.png" alt="设置之后的"></p><ol start="2"><li>清除内部浮动</li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;style&gt;    .par {      border: 5px solid #fcc;      width: 300px;      /* 设置一条即可清除浮动,撑满div */      /* overflow: hidden; */      /* display: inline-block; */      /* float:left; */      /* position为absolute或fixed */      position: absolute;    }    .child {      border: 5px solid #f66;      width: 100px;      height: 100px;      float: left;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;par&quot;&gt;    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/22/5ba6587f8ba71.png" alt="img"></p><ol start="3"><li>防止垂直 margin 重叠</li></ol><blockquote><p>两个p之间的距离为100px，发生了margin重叠。</p></blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;3. 防止垂直 margin 重叠&lt;/title&gt;  &lt;style&gt;    p {      color: #f55;      background: #fcc;      width: 200px;      line-height: 100px;      text-align: center;      margin: 100px;    }    .wrapper{      /* 防止垂直 margin 重叠 */      overflow: hidden;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;p&gt;Haha&lt;/p&gt;  &lt;div class=&quot;wrapper&quot;&gt;    &lt;p&gt;Hehe&lt;/p&gt;  &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/22/5ba658997ce06.png" alt="img"></p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css随笔记</title>
      <link href="/css%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/css%E9%9A%8F%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="比例block"><a href="#比例block" class="headerlink" title="比例block"></a>比例block</h4><p>display block<br>height 0<br>width 100px //设置宽度<br>padding-bottom 50% //设置比例,比如50%,则高:宽 = 1:2</p><h4 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h4><blockquote><p>在CSS中，你设置一个元素的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p></blockquote><h5 id="box-sizing-属性可以被用来调整这些表现"><a href="#box-sizing-属性可以被用来调整这些表现" class="headerlink" title="box-sizing 属性可以被用来调整这些表现:"></a>box-sizing 属性可以被用来调整这些表现:</h5><ul><li><p>content-box  是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</p></li><li><p>border-box 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高。</p></li></ul><pre><code class="html">&lt;template&gt;  &lt;div class=&quot;icons-box&quot;&gt;    &lt;div class=&quot;icon-item&quot;&gt;      &lt;div class=&quot;icon-img-box&quot;&gt;        &lt;img class=&quot;icon-img&quot; src=&quot;http://img1.qunarzz.com/piao/fusion/1803/95/f3dd6c383aeb3b02.png&quot; alt=&quot;&quot;&gt;      &lt;/div&gt;      &lt;p class=&quot;icon-text&quot;&gt;热门景点&lt;/p&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default{    name: &#39;HomeIcons&#39;  }&lt;/script&gt;&lt;style lang=&quot;stylus&quot; scoped&gt;.icons-box  height 0  width 100%  padding-bottom 50%  // background red  .icon-item    width 25%    height 0    padding-bottom 25%    overflow hidden    position relative    // background green    float left    .icon-img-box      position absolute      top 0      left 0      right 0      bottom .44rem      padding .1rem      box-sizing border-box      .icon-img        height 100%        margin 0 auto         display block    .icon-text      position absolute      bottom 0      left 0      right 0      width 100%      height .44rem      line-height .44rem      text-align center&lt;/style&gt;</code></pre><h4 id="超过一行的文本显示…"><a href="#超过一行的文本显示…" class="headerlink" title="超过一行的文本显示…"></a>超过一行的文本显示…</h4><pre><code class="css">ellipeie()  overflow:hidden  white-space:nowrap  text-overflow:ellipsis</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vscode配置备份</title>
      <link href="/vscode%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/"/>
      <url>/vscode%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<pre><code class="json">{    &quot;editor.fontSize&quot;: 22,    &quot;python.pythonPath&quot;: &quot;/media/arley/编程代码/python/venv/scrapyVTE/bin/python&quot;,    &quot;explorer.confirmDelete&quot;: false,    &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;,    &quot;java.home&quot;: &quot;/usr/lib/jvm/java-8-openjdk-amd64/&quot;,    &quot;java.errors.incompleteClasspath.severity&quot;: &quot;ignore&quot;,    &quot;open-in-browser.default&quot;: &quot;chrome&quot;,    &quot;editor.tabSize&quot;: 2,    &quot;files.associations&quot;: {        &quot;*.vue&quot;: &quot;html&quot;,        &quot;*.vue&quot;: &quot;vue&quot;    },    &quot;stylusSupremacy.insertColons&quot;: true, // 是否插入冒号    &quot;stylusSupremacy.insertSemicolons&quot;: false, // 是否插入分好    &quot;stylusSupremacy.insertBraces&quot;: false, // 是否插入大括号    &quot;stylusSupremacy.insertNewLineAroundImports&quot;: false, // import之后是否换行    &quot;stylusSupremacy.insertNewLineAroundBlocks&quot;: false,    &quot;eslint.autoFixOnSave&quot;: true,    &quot;eslint.options&quot;: {        &quot;extensions&quot;: [            &quot;.js&quot;,            &quot;.vue&quot;        ]    },    &quot;eslint.validate&quot;: [        &quot;javascript&quot;,{            &quot;language&quot;: &quot;vue&quot;,            &quot;autoFix&quot;: true        },&quot;html&quot;,        &quot;vue&quot;    ],    &quot;search.exclude&quot;: {        &quot;**/node_modules&quot;: true,        &quot;**/bower_components&quot;: true,        &quot;**/dist&quot;: true    },    &quot;emmet.syntaxProfiles&quot;: {        &quot;javascript&quot;: &quot;jsx&quot;,        &quot;vue&quot;: &quot;html&quot;,        &quot;vue-html&quot;: &quot;html&quot;    },    &quot;editor.renderWhitespace&quot;: &quot;boundary&quot;}</code></pre><blockquote><p>参考了:<a href="https://www.haorooms.com/post/vscode_eslint" target="_blank" rel="noopener">https://www.haorooms.com/post/vscode_eslint</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vscode的Git使用及记录</title>
      <link href="/Vscode%E7%9A%84Git%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%AE%B0%E5%BD%95/"/>
      <url>/Vscode%E7%9A%84Git%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ul><li>git init</li><li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:arleyGuoLei/Travel.git</li></ul><hr><ul><li>git add .</li><li>git commit -m ‘xxxx’</li><li>git push</li></ul><hr><ul><li>git pull</li><li>git checkout FenZhi</li><li>git status</li></ul><hr><ol><li>在<code>swiper</code>分支上提交并且push</li><li>本地切换到<code>master</code>分支:<code>git checkout master</code></li><li>git merge origin/swiper</li><li>git push</li></ol><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>在github上手动创建分支</li><li>本地 <code>git pull</code> 同步拉取线上分支</li><li>本地切换分支 <code>git checkout [新分支]</code></li><li>写完代码之后:<code>git add .</code></li><li>提交代码:<code>git commit -m &#39;描述&#39;</code></li><li>push到线上当前新建的分支:<code>git push</code></li><li>切换到master分支:<code>git checkout master</code></li><li>合并分支:<code>git merge origin/[分支名]</code></li><li>提交代码:<code>git push</code></li></ol>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue项目预热-框架模块的准备</title>
      <link href="/Vue%E9%A1%B9%E7%9B%AE%E9%A2%84%E7%83%AD-%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%87%86%E5%A4%87/"/>
      <url>/Vue%E9%A1%B9%E7%9B%AE%E9%A2%84%E7%83%AD-%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<ol><li>vue-cli脚手架安装 及 环境配置</li></ol><ul><li>nodeJs(npm) / Git等</li><li><code>vue init webpack Travel</code></li><li>安装之后 <code>npm run dev</code>运行项目 </li></ul><ol start="2"><li>默认代码的修改,以及插件的引用  </li></ol><ul><li>禁止用户缩放:<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</code> — index.html</li><li>引入reset.css(重置不同浏览器的默认样式) 和 border.css (移动设备1像素边框问题),在main.js里<pre><code class="javascript">import &#39;./assets/styles/reset.css&#39;import &#39;./assets/styles/border.css&#39;</code></pre></li></ul><ol start="3"><li><p><code>npm install fastclick --save</code>:去除移动端click点击300ms延迟问题</p><pre><code class="javascript">import fastClick from &#39;fastclick&#39;fastClick.attach(document.body)</code></pre></li><li><p>stylus的安装</p></li></ol><ul><li><code>npm install stylus --save</code></li><li><code>npm install stylus-loader --save</code></li></ul><ol start="5"><li>vscode写vue对html没有代码提示的解决:<br>设置setting</li></ol><pre><code class="json">&quot;files.associations&quot;: {    &quot;*.vue&quot;:&quot;html&quot;}</code></pre><blockquote><p>自动格式化stylus 自动格式化为eslint代码,参考Vscode配置备份</p></blockquote><ol start="6"><li><code>npm install axios --save</code> ajax请求插件 </li></ol>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue中的动画特效</title>
      <link href="/Vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88/"/>
      <url>/Vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88/</url>
      <content type="html"><![CDATA[<h4 id="1-Vue动画-Vue中CSS动画原理"><a href="#1-Vue动画-Vue中CSS动画原理" class="headerlink" title="1 Vue动画 - Vue中CSS动画原理"></a>1 Vue动画 - Vue中CSS动画原理</h4><ol><li>在进入/离开的过渡中，会有 6 个 class 切换。</li></ol><ul><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来<code>定义进入过渡的过程时间，延迟和曲线函数</code>。</li><li><p>v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</p></li><li><p>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p></li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来<code>定义离开过渡的过程时间，延迟和曲线函数</code>。</li><li><code>v-leave-to</code>: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .slide-fade-enter-active,        .slide-fade-leave-active {            transition: all .8s ease;        }        .slide-fade-enter,        .slide-fade-leave-to {            transform: translateX(10px);            opacity: 0;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition name=&quot;slide-fade&quot;&gt;            &lt;p v-show=&quot;show&quot;&gt;hello Arley~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-在Vue中使用-animate-css-库"><a href="#2-在Vue中使用-animate-css-库" class="headerlink" title="2 在Vue中使用 animate.css 库"></a>2 在Vue中使用 animate.css 库</h4><ol><li><p>animate通过定义keyframes动画实现动画</p></li><li><p>自定义动画类名 - 配合animateCss实现动画</p></li></ol><ul><li>enter-class</li><li>enter-active-class</li><li>enter-to-class (2.1.8+)</li><li>leave-class</li><li>leave-active-class</li><li>leave-to-class (2.1.8+)</li></ul><h5 id="vue-Css3的animate实现动画"><a href="#vue-Css3的animate实现动画" class="headerlink" title="vue Css3的animate实现动画"></a>vue Css3的animate实现动画</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        @keyframes bounce-in{            0% {                transform: scale(0);            }            50% {                transform: scale(1.5)            }            100% {                transform: scale(1)            }        }        /* 隐藏到显示 */        .slide-fade-enter-active{            animation: bounce-in 2s ease-in-out;            transform-origin: left center;        }        /* 显示到隐藏 */        .slide-fade-leave-active {            animation: bounce-in 2s ease-in-out reverse;            transform-origin: left center;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition name=&quot;slide-fade&quot;&gt;            &lt;p v-show=&quot;show&quot;&gt;hello Arley~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="animate-css-自定义类名实现动画"><a href="#animate-css-自定义类名实现动画" class="headerlink" title="animate.css + 自定义类名实现动画"></a>animate.css + 自定义类名实现动画</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;animate.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition enter-active-class=&quot;animated rubberBand&quot; leave-active-class=&quot;animated swing&quot;&gt;            &lt;p v-show=&quot;show&quot;&gt;hello Arley~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="在Vue中同时使用过渡和动画"><a href="#在Vue中同时使用过渡和动画" class="headerlink" title="在Vue中同时使用过渡和动画"></a>在Vue中同时使用过渡和动画</h4><ol><li>页面载入时即执行初始动画<blockquote><p> appear appear-active-class=”animated rubberBand”</p></blockquote></li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;animate.css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition         appear        appear-active-class=&quot;animated rubberBand&quot;        enter-active-class=&quot;animated rubberBand&quot;         leave-active-class=&quot;animated swing&quot;&gt;            &lt;p v-show=&quot;show&quot;&gt;hello Arley~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="2"><li>animate动画和transition过渡同时使用</li></ol><blockquote><p>在自定义类名上加上将会自动生成的类名名字,然后再写css样式.</p></blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;animate.css&quot;&gt;    &lt;style&gt;        .fade-enter,        .fade-leave-to {            opacity: 0;        }        .fade-enter-active,.fade-leave-active{            transition: opacity 3s;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;!-- 通过type设置要以哪个类型作为动画时长 type=&quot;transition&quot;--&gt;        &lt;!-- 或者直接通过:duration 手动设置时长 --&gt;        &lt;transition name=&quot;fade&quot; appear appear-active-class=&quot;animated rubberBand&quot;            :duration=&quot;{enter:2000,leavve:3000}&quot;            enter-active-class=&quot;animated rubberBand fade-enter-active&quot;            leave-active-class=&quot;animated swing fade-leave-active&quot;&gt;            &lt;p v-show=&quot;show&quot;&gt;hello Arley~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="4-Vue中的-Js-动画与-Velocity-js-的结合"><a href="#4-Vue中的-Js-动画与-Velocity-js-的结合" class="headerlink" title="4 Vue中的 Js 动画与 Velocity.js 的结合"></a>4 Vue中的 Js 动画与 Velocity.js 的结合</h4><ol><li>JavaScript钩子</li></ol><pre><code class="html">&lt;transition  v-on:before-enter=&quot;beforeEnter&quot;  v-on:enter=&quot;enter&quot;  v-on:after-enter=&quot;afterEnter&quot;  v-on:enter-cancelled=&quot;enterCancelled&quot;  v-on:before-leave=&quot;beforeLeave&quot;  v-on:leave=&quot;leave&quot;  v-on:after-leave=&quot;afterLeave&quot;  v-on:leave-cancelled=&quot;leaveCancelled&quot;&gt;  &lt;!-- ... --&gt;&lt;/transition&gt;</code></pre><pre><code class="JavaScript">// ...methods: {  // --------  // 进入中  // --------  beforeEnter: function (el) {    // ...  },  // 当与 CSS 结合使用时  // 回调函数 done 是可选的  enter: function (el, done) {    // ...    done()  },  afterEnter: function (el) {    // ...  },  enterCancelled: function (el) {    // ...  },  // --------  // 离开时  // --------  beforeLeave: function (el) {    // ...  },  // 当与 CSS 结合使用时  // 回调函数 done 是可选的  leave: function (el, done) {    // ...    done()  },  afterLeave: function (el) {    // ...  },  // leaveCancelled 只用于 v-show 中  leaveCancelled: function (el) {    // ...  }}</code></pre><h4 id="5-Vue中多个元素或组件的过渡"><a href="#5-Vue中多个元素或组件的过渡" class="headerlink" title="5 Vue中多个元素或组件的过渡"></a>5 Vue中多个元素或组件的过渡</h4><ol><li>多个元素之间的动画过渡</li></ol><blockquote><p>v-if/v-else 混用  transition可以设置mode修改显示方式(过渡顺序) PS:两个元素之间的key需要不同,要不然vue会复用组件. </p></blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        @keyframes bounce-in{            0% {                transform: scale(0);            }            50% {                transform: scale(1.5)            }            100% {                transform: scale(1)            }        }        /* 隐藏到显示 */        .slide-fade-enter-active{            animation: bounce-in 2s ease-in-out;            transform-origin: left center;        }        /* 显示到隐藏 */        .slide-fade-leave-active {            animation: bounce-in 2s ease-in-out reverse;            transform-origin: left center;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition name=&quot;slide-fade&quot; mode=&quot;out-in&quot;&gt;            &lt;p v-if=&quot;show&quot; key=&quot;hello&quot;&gt;hello Arley~&lt;/p&gt;            &lt;p v-else=&quot;show&quot; key=&quot;bye&quot;&gt;Bye~&lt;/p&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="2"><li>多个组件之间的过渡</li></ol><h5 id="设置两个组件的方式"><a href="#设置两个组件的方式" class="headerlink" title="设置两个组件的方式:"></a>设置两个组件的方式:</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        @keyframes bounce-in{            0% {                transform: scale(0);            }            50% {                transform: scale(1.5)            }            100% {                transform: scale(1)            }        }        /* 隐藏到显示 */        .slide-fade-enter-active{            animation: bounce-in 2s ease-in-out;            transform-origin: left center;        }        /* 显示到隐藏 */        .slide-fade-leave-active {            animation: bounce-in 2s ease-in-out reverse;            transform-origin: left center;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition name=&quot;slide-fade&quot; mode=&quot;out-in&quot;&gt;            &lt;child-one v-if=&quot;show&quot; &gt;&lt;/child-one&gt;            &lt;child-two v-else=&quot;show&quot;&gt;&lt;/child-two&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;child-one&#39;, {            template:&quot;&lt;div&gt;One.&lt;/div&gt;&quot;        })        Vue.component(&#39;child-two&#39;, {            template:&quot;&lt;div&gt;Two.&lt;/div&gt;&quot;        })        var vm = new Vue({            el: &#39;#root&#39;,            data: {                show: true            },            methods: {                change: function () {                    this.show = !this.show;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="动态组件的方式"><a href="#动态组件的方式" class="headerlink" title="动态组件的方式"></a>动态组件的方式</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;VueCss过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        @keyframes bounce-in{            0% {                transform: scale(0);            }            50% {                transform: scale(1.5)            }            100% {                transform: scale(1)            }        }        /* 隐藏到显示 */        .slide-fade-enter-active{            animation: bounce-in 2s ease-in-out;            transform-origin: left center;        }        /* 显示到隐藏 */        .slide-fade-leave-active {            animation: bounce-in 2s ease-in-out reverse;            transform-origin: left center;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition name=&quot;slide-fade&quot; mode=&quot;out-in&quot;&gt;            &lt;component :is=&quot;type&quot;&gt;&lt;/component&gt;        &lt;/transition&gt;        &lt;button @click=&quot;change&quot;&gt;切换&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;child-one&#39;, {            template:&quot;&lt;div&gt;One.&lt;/div&gt;&quot;        })        Vue.component(&#39;child-two&#39;, {            template:&quot;&lt;div&gt;Two.&lt;/div&gt;&quot;        })        var vm = new Vue({            el: &#39;#root&#39;,            data: {                type:&#39;child-one&#39;                          },            methods: {                change: function () {                    this.type = this.type===&quot;child-one&quot;?&#39;child-two&#39;:&#39;child-one&#39;;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-Vue中的列表过渡"><a href="#6-Vue中的列表过渡" class="headerlink" title="6 Vue中的列表过渡"></a>6 Vue中的列表过渡</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Vue列表过渡动画&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;       .list-enter,.list-leave-to{           opacity: 0;       }       .list-enter-active,.list-leave-active{           transition: opacity 1s;       }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;transition-group name=&quot;list&quot;&gt;            &lt;div v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;                {{item.title}}            &lt;/div&gt;        &lt;/transition-group&gt;        &lt;button @click=&quot;add&quot;&gt;增加&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var count = 0;        var vm = new Vue({            el: &#39;#root&#39;,            data: {                list:[]                         },            methods: {                add: function () {                    this.list.push({                        id:count++,                        title:&#39;hello!&#39; + count                    })                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue学习笔记 - 组件1</title>
      <link href="/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BB%84%E4%BB%B61/"/>
      <url>/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%BB%84%E4%BB%B61/</url>
      <content type="html"><![CDATA[<h4 id="1-使用组件的细节点"><a href="#1-使用组件的细节点" class="headerlink" title="1 使用组件的细节点"></a>1 使用组件的细节点</h4><p>1.is属性</p><blockquote><p>ul/ol(li),table(tr)<br><code>&lt;li is=&quot;xxx&quot;&gt;&lt;/li&gt;</code></p></blockquote><p>2.自定义组件的data必须是一个函数</p><p>3.ref的使用</p><blockquote><p>获取元素dom</p></blockquote><h5 id="计数器例子"><a href="#计数器例子" class="headerlink" title="计数器例子"></a>计数器例子</h5><blockquote><p>1.Vue.component<br>2.this.$emit(‘change’)<br>3.@change=(“函数名”)</p></blockquote><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Counter&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;item-counter ref=&quot;one&quot; @change=&quot;handleChange&quot;&gt;&lt;/item-counter&gt;        &lt;item-counter ref=&quot;two&quot; @change=&quot;handleChange&quot;&gt;&lt;/item-counter&gt;        &lt;div&gt;{{sum}}&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;item-counter&#39;,{            template:&#39;&lt;div @click=&quot;bindCounter&quot;&gt;{{counter}}&lt;/div&gt;&#39;,            data:function(){                return{                    counter:0                }            },            methods:{                bindCounter:function(){                    this.counter++;                    this.$emit(&#39;change&#39;);                }            }        })        var vm = new Vue({            el:&#39;#root&#39;,            data:{                sum:0            },            methods:{                handleChange:function(){                    this.sum = this.$refs.one.counter + this.$refs.two.counter;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-父子组件间的数据传递"><a href="#2-父子组件间的数据传递" class="headerlink" title="2 父子组件间的数据传递"></a>2 父子组件间的数据传递</h4><ol><li>局部组件</li></ol><blockquote><p>先定义一个对象,然后在new Vue里的components去引用</p></blockquote><ol start="2"><li>父组件向子组件传递值</li></ol><blockquote><p>:绑定 比如 :count=”xxx”  向模板传入count参数,需要在模板定义的时候在props进行定义count</p></blockquote><ol start="3"><li>单项数据流(<code>子组件禁止直接去修改父组件的值</code>)</li></ol><blockquote><p>父组件的数据可能被多个地方调用,所以禁止修改,需要用自己的变量去接收,然后在修改.</p></blockquote><ol start="4"><li>子元素给父元素传值(带参数) </li></ol><blockquote><p>函数绑定的地方直接写函数名,不去要参数,然后在用的时候直接存入,在函数定义时候接收.</p></blockquote><h5 id="计数器2"><a href="#计数器2" class="headerlink" title="计数器2"></a>计数器2</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Counter&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;item-counter :count=&quot;1&quot; @inc=&quot;numberInc&quot;&gt;&lt;/item-counter&gt;        &lt;item-counter :count=&quot;1&quot; @inc=&quot;numberInc&quot;&gt;&lt;/item-counter&gt;        &lt;div&gt;{{total}}&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        var counter = {            // @click=&quot;handCounter&quot; 得写在模板上面,不能写在&lt;item-counter xxx(这) :count=&quot;1&quot;&gt;&lt;/item-counter&gt;            template: &#39;&lt;div @click=&quot;handCounter&quot;&gt;{{number}}&lt;/div&gt;&#39;,            props: [&#39;count&#39;],            data: function () {                return{                    // 这里得return   拷贝一份父元素的number                    number: this.count                }            },            methods:{                handCounter:function(){                    this.number++;                    this.$emit(&#39;inc&#39;,1);                }            }        }        var vm = new Vue({            el: &#39;#root&#39;,            components: { &#39;item-counter&#39;:counter },            data:{                total:2            },            methods:{                numberInc:function(count){                    this.total+=count;                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="3-组件参数校验以及非Props特性"><a href="#3-组件参数校验以及非Props特性" class="headerlink" title="3 组件参数校验以及非Props特性"></a>3 组件参数校验以及非Props特性</h4><ol><li>Props的参数校验</li></ol><pre><code class="javascript">props: {  status: {    type: String,    required: true,    //返回true 校验通过    validator: function (value) {      return [        &#39;syncing&#39;,        &#39;synced&#39;,        &#39;version-conflict&#39;,        &#39;error&#39;      ].indexOf(value) !== -1    }  }}</code></pre><ol start="2"><li>非Props特性</li></ol><blockquote><p>父传子不接,用的不多.</p></blockquote><h4 id="4-给组件绑定原生事件"><a href="#4-给组件绑定原生事件" class="headerlink" title="4 给组件绑定原生事件"></a>4 给组件绑定原生事件</h4><p>1.low的写法</p><blockquote><p>子元素先监听,然后this.$emit() 给父元素</p></blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Counter&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;item-child @fun=&quot;handleClick&quot;&gt;&lt;/item-child&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;item-child&#39;, {             template: &#39;&lt;div @click=&quot;handleChild&quot;&gt;Child&lt;/div&gt;&#39;,            methods:{                handleChild:function(){                    this.$emit(&#39;fun&#39;)                }            }         })        var vm = new Vue({            el: &#39;#root&#39;,            methods: {                handleClick: function () {                    alert(&quot;click.&quot;);                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="2"><li>好的写法</li></ol><pre><code class="html">    &lt;div id=&quot;root&quot;&gt;        &lt;item-child @click.native=&quot;handleClick&quot;&gt;&lt;/item-child&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;item-child&#39;, {             template: &#39;&lt;div&gt;Child&lt;/div&gt;&#39;,         })        var vm = new Vue({            el: &#39;#root&#39;,            methods: {                handleClick: function () {                    alert(&quot;click.&quot;);                }            }        })    &lt;/script&gt;</code></pre><h4 id="5-非父子组件之间的传值问题"><a href="#5-非父子组件之间的传值问题" class="headerlink" title="5 非父子组件之间的传值问题"></a>5 非父子组件之间的传值问题</h4><p>1.bus/发布订阅模式/观察者模式</p><p><code>this.bus.$emit()</code></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;非父子组件间的传值&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;!-- 这里的content不能打: --&gt;        &lt;item-child content=&quot;Arley&quot;&gt;&lt;/item-child&gt;        &lt;item-child content=&quot;GuoLei&quot;&gt;&lt;/item-child&gt;    &lt;/div&gt;    &lt;script&gt;       //关键↓ 1        Vue.prototype.bus = new Vue();        Vue.component(&#39;item-child&#39;, {            props: {                content: String            },            data: function () {                return {                    selfContent: this.content                }            },            template: &#39;&lt;div @click=&quot;changeItem&quot;&gt;{{selfContent}}&lt;/div&gt;&#39;,            methods:{                changeItem:function(){                   //关键↓ 2                    this.bus.$emit(&#39;change&#39;,this.selfContent)                }            },            //关键↓ 3            mounted:function(){                var that = this;                // 4 监听                this.bus.$on(&#39;change&#39;,function(msg){                    that.selfContent = msg;                })            },        })        var vm = new Vue({            el: &#39;#root&#39;        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-插槽-slot"><a href="#6-插槽-slot" class="headerlink" title="6 插槽(slot)"></a>6 插槽(slot)</h4><blockquote><p>父组件优雅的向子组件传递Dom结构</p></blockquote><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;插槽&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;body-content&gt;            &lt;div slot=&quot;header&quot;&gt;我是头部&lt;/div&gt;            &lt;div slot=&quot;footer&quot;&gt;我是底部&lt;/div&gt;        &lt;/body-content&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;body-content&#39;, {            // 最外部必须套一个root根节点            template: `            &lt;div&gt;                &lt;slot name=&#39;header&#39;&gt;a&lt;/slot&gt;                &lt;div&gt;我是内容&lt;/div&gt;                &lt;slot name=&#39;footer&#39;&gt;a&lt;/slot&gt;            &lt;/div&gt;            `        })        var vm = new Vue({            el: &#39;#root&#39;        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="7-作用域插槽"><a href="#7-作用域插槽" class="headerlink" title="7 作用域插槽"></a>7 作用域插槽</h4><blockquote><p>子组件中留一部分代码,由父组件传入,决定渲染模式.</p></blockquote><pre><code class="html">    &lt;div id=&quot;root&quot;&gt;        &lt;body-content&gt;            &lt;template slot-scope=&quot;props&quot;&gt;                &lt;li&gt;{{props.item}} -- hello&lt;/li&gt;            &lt;/template&gt;        &lt;/body-content&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.component(&#39;body-content&#39;, {            data: function () {                return {                    list: [1, 2, 3, 4, 5]                }            },            template: `            &lt;div&gt;                &lt;ul&gt;                    &lt;slot v-for=&quot;item in list&quot; :item=item&gt;&lt;/slot&gt;                &lt;/ul&gt;            &lt;/div&gt;            `        })        var vm = new Vue({            el: &#39;#root&#39;        })    &lt;/script&gt;</code></pre><h4 id="8-动态组件与-v-once-指令"><a href="#8-动态组件与-v-once-指令" class="headerlink" title="8 动态组件与 v-once 指令"></a>8 动态组件与 v-once 指令</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;插槽&lt;/title&gt;    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;!-- 写法1 low --&gt;        &lt;!-- &lt;body-content-one v-if=&quot;type===&#39;body-content-one&#39;&quot;&gt;&lt;/body-content-one&gt;        &lt;body-content-two v-if=&quot;type===&#39;body-content-two&#39;&quot;&gt;&lt;/body-content-two&gt; --&gt;        &lt;!-- 直接根据 is的属性赋值模板 --&gt;        &lt;component :is=&quot;type&quot;&gt;&lt;/component&gt;        &lt;input type=&quot;button&quot; value=&quot;切换&quot; @click=&quot;change&quot;&gt;    &lt;/div&gt;    &lt;script&gt;        // v-once 能把组件保存在内容,第一次渲染之后不用再次渲染        Vue.component(&#39;body-content-one&#39;, {            template: &quot;&lt;div v-once&gt;one&lt;/div&gt;&quot;        })        Vue.component(&#39;body-content-two&#39;, {            template: &quot;&lt;div v-once&gt;two&lt;/div&gt;&quot;        })        var vm = new Vue({            el: &#39;#root&#39;,            data:{              type:&#39;body-content-one&#39;              },            methods:{                change:function(){                    this.type = (this.type===&#39;body-content-one&#39;?&#39;body-content-two&#39;:&#39;body-content-one&#39;);                }            }        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序猿安全信息大赛日记 - [河北INS首届线下决赛]</title>
      <link href="/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%AE%89%E5%85%A8%E4%BF%A1%E6%81%AF%E5%A4%A7%E8%B5%9B%E6%97%A5%E8%AE%B0/"/>
      <url>/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%AE%89%E5%85%A8%E4%BF%A1%E6%81%AF%E5%A4%A7%E8%B5%9B%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>本文主要做一个思想感悟记录,不贴代码,不解题,时刻提醒自己学无止境.</p></blockquote><p>虽然说自己能爬虫,爆破,或者算是找漏洞爆出一些自己想要的数据(某雅题库10多w+抓取,某些网站爆破获取自己想要的一些资料,下载一些需要付费才能下载或者用的数据,免费开通需支付的功能等都有实现过),一直以为自己能算是安全方面也有一些造诣的人,经过这次比赛吧,看到别人的比赛成果(漏洞攻防,服务器渗透等),感觉自己真是菜鸡一只.不过还是安慰自己说一下,我是程序猿,做开发的… 但在代码审计的时候,我却一脸蒙圈了.<br>了解到一些或者深入看到了一些技术的高大上,比如:sql注入(SQLMap),Xss,上传漏洞(一句话木马,菜刀等).</p><h4 id="学到的"><a href="#学到的" class="headerlink" title="学到的"></a>学到的</h4><ol><li>学开发,真的需要学习一些安全方面的知识,起码要知道自己怎么写出来的BUG,自己的网站怎么被曰了,服务器怎么被提权了等.</li><li><code>研究生</code>-&gt; 很多大赛志愿者,负责维护赛场秩序的,据了解,很多都是技术很高的研究生,知道了其他大学校都把实力强,学习好的同学们保研了,这就保证了能有很高技术的同时,还获得了更高的学历;我如果不更好好学习一些,校招,企招的时候人家凭什么不要人家,要你呢…</li><li>一定需要学习一本工具性语言,比如Python,能够快速实现自己的思想的,自动化脚本;虽然有很多年的易语言开发技巧经验了,但这货必须抛弃,我要学习一门工具性语言作为辅助开发语言,那就py吧.</li><li>学习路线明确,前端 + PHP =&gt; 主要路线,py作为辅助语言.</li><li>一定需要背一些东西,常用的,真得记,比赛或者工作的时候,真不能一直百度,然后就贴… 都不带看的,这种行为很不高善.</li><li>多学会做记录,总结,开源,分享;这次比赛能获奖,基本归功于git上的脚本和csdn上前辈总结的经验技巧.</li></ol><p><img src="https://i.loli.net/2018/09/15/5b9d044f3ec54.jpg" alt="现场"></p><p><img src="https://i.loli.net/2018/09/15/5b9d0430cf4e0.jpg" alt="二等"></p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS填坑记录 - display篇</title>
      <link href="/CSS%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95-display%E7%AF%87/"/>
      <url>/CSS%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95-display%E7%AF%87/</url>
      <content type="html"><![CDATA[<h4 id="display所有属性"><a href="#display所有属性" class="headerlink" title="display所有属性"></a>display所有属性</h4><blockquote><p>加黑的为主要学习对象,其余的知道有他的存在,用到了再深入学习.</p></blockquote><table><thead><tr><th>取值</th><th>解释</th></tr></thead><tbody><tr><td><code>none</code></td><td>隐藏对象。与visibility属性的hidden值不同，其不为被隐藏的对象保留其物理空间</td></tr><tr><td><code>inline</code></td><td>指定对象为内联元素。</td></tr><tr><td><code>block</code></td><td>指定对象为块元素。</td></tr><tr><td>list-item</td><td>指定对象为列表项目。</td></tr><tr><td><code>inline-block</code></td><td>指定对象为内联块元素。</td></tr><tr><td>table</td><td>指定对象作为块元素级的表格。类同于html标签<table></table></td></tr><tr><td>inline-table</td><td>指定对象作为内联元素级的表格。类同于html标签<table></table></td></tr><tr><td>table-caption</td><td>指定对象作为表格标题。类同于html标签<caption></caption></td></tr><tr><td>table-cell</td><td>指定对象作为表格单元格。类同于html标签\</td><td></td></tr><tr><td>table-row</td><td>指定对象作为表格行。类同于html标签</td></tr><tr></tr><tr><td>table-row-group</td><td>指定对象作为表格行组。类同于html标签<tbody></tbody></td></tr><tr><td>table-column</td><td>指定对象作为表格列。类同于html标签<col></td></tr><tr><td>table-column-group</td><td>指定对象作为表格列组显示。类同于html标签<colgroup></colgroup></td></tr><tr><td>table-header-group</td><td>指定对象作为表格标题组。类同于html标签<thead></thead></td></tr><tr><td>table-footer-group</td><td>指定对象作为表格脚注组。类同于html标签<tfoot></tfoot></td></tr><tr><td>run-in</td><td>根据上下文决定对象是内联对象还是块级对象。（CSS3）</td></tr><tr><td>box</td><td>将对象作为弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）</td></tr><tr><td>inline-box</td><td>将对象作为内联块级弹性伸缩盒显示。（伸缩盒最老版本）（CSS3）</td></tr><tr><td>flexbox</td><td>将对象作为弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）</td></tr><tr><td>inline-flexbox</td><td>将对象作为内联块级弹性伸缩盒显示。（伸缩盒过渡版本）（CSS3）</td></tr><tr><td><code>flex</code></td><td>将对象作为弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）</td></tr><tr><td>inline-flex</td><td>将对象作为内联块级弹性伸缩盒显示。（伸缩盒最新版本）（CSS3）</td></tr></tbody></table><h4 id="block，inline和inline-block-辨析"><a href="#block，inline和inline-block-辨析" class="headerlink" title="block，inline和inline-block 辨析"></a>block，inline和inline-block 辨析</h4><h5 id="总叙述-复制来的-懒得看-也懒得总结"><a href="#总叙述-复制来的-懒得看-也懒得总结" class="headerlink" title="总叙述(复制来的,懒得看,也懒得总结)"></a>总叙述(复制来的,懒得看,也懒得总结)</h5><ol><li>block和inline这两个概念是简略的说法，完整确切的说应该是 block-level elements (块级元素) 和 inline elements (内联元素)。block元素通常被现实为独立的一块，会单独换一行；inline元素则前后不会产生换行，一系列inline元素都在一行内显示，直到该行排满。</li><li>大体来说HTML元素各有其自身的布局级别（block元素还是inline元素）：<blockquote><p>常见的块级元素有 DIV, FORM, TABLE, P, PRE, H1~H6, DL, OL, UL 等。</p></blockquote></li></ol><blockquote><p>常见的内联元素有 SPAN, A, STRONG, EM, LABEL, INPUT, SELECT, TEXTAREA, IMG, BR 等。</p></blockquote><ol start="3"><li>block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含inline元素，而不能包含block元素。</li></ol><h5 id="block，inline和inlinke-block细节对比"><a href="#block，inline和inlinke-block细节对比" class="headerlink" title="block，inline和inlinke-block细节对比"></a>block，inline和inlinke-block细节对比</h5><ul><li>display:block</li></ul><ol><li>block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。</li><li>block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。</li><li>block元素可以设置margin和padding属性。</li></ol><blockquote><p><strong>absolute的子元素称不开relative的父元素. 父元素需要自行设置高度.</strong></p></blockquote><ul><li>display:inline</li></ul><ol><li>inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。</li><li>inline元素设置width,height属性无效。</li><li>inline元素的margin和padding属性，padding, margin-left, margin-right都产生边距效果；<code>但竖直方向的 margin-top, margin-bottom不会产生边距效果。</code></li><li>盒子模型不能撑开父元素</li></ol><ul><li>display:inline-block<blockquote><p>能设置高度,宽度,盒子模型的行内样式.</p></blockquote></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Display&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        *{            margin: 0;        }        .block{            background: red;            margin-bottom: 100px;            position: relative;            /*height: 200px;*/        }        .block-item{            /*position: absolute;*/            display: block;            background: yellow;            width: 100px;            height: 50px;            padding: 20px;            margin: 30px;            border: 2px solid yellow;        }        .inline-item{            display: inline;            /*inline元素设置width,height属性无效。*/            width: 100px;            height: 50px;            /*inline元素的margin和padding属性，            水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；            但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。*/            padding: 20px;            margin: 30px;            border: 2px solid yellow;            background: green;        }        .inline-block-item{            display: inline-block;            width: 200px;            height: 50px;            background: aqua;            padding: 20px;            margin: 30px;            border: 2px solid yellow;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;block&quot;&gt;        &lt;p class=&quot;block-item&quot;&gt;Block&lt;/p&gt;        &lt;p class=&quot;block-item&quot;&gt;Block&lt;/p&gt;        &lt;p class=&quot;block-item&quot;&gt;Block&lt;/p&gt;    &lt;/div&gt;    &lt;div class=&quot;block&quot;&gt;        &lt;span class=&quot;inline-item&quot;&gt;inline&lt;/span&gt;        &lt;span class=&quot;inline-item&quot;&gt;inline&lt;/span&gt;        &lt;span class=&quot;inline-item&quot;&gt;inline&lt;/span&gt;        &lt;span class=&quot;inline-item&quot;&gt;inline&lt;/span&gt;        &lt;span class=&quot;inline-item&quot;&gt;inline&lt;/span&gt;    &lt;/div&gt;    &lt;div class=&quot;block&quot;&gt;        &lt;div class=&quot;inline-block-item&quot;&gt;inline-blcok&lt;/div&gt;        &lt;div class=&quot;inline-block-item&quot;&gt;inline-blcok&lt;/div&gt;        &lt;div class=&quot;inline-block-item&quot;&gt;inline-blcok&lt;/div&gt;        &lt;div class=&quot;inline-block-item&quot;&gt;inline-blcok&lt;/div&gt;        &lt;div class=&quot;inline-block-item&quot;&gt;inline-blcok&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/13/5b9a54b638fb2.png" alt="display常用的三个属性"></p><h5 id="关于-display-flex-弹性模型-小程序里经常用到-几个属性记录一下"><a href="#关于-display-flex-弹性模型-小程序里经常用到-几个属性记录一下" class="headerlink" title="关于 display:flex; 弹性模型,小程序里经常用到,几个属性记录一下."></a>关于 display:flex; 弹性模型,小程序里经常用到,几个属性记录一下.</h5><p><img src="https://i.loli.net/2018/09/13/5b9a55e1a1421.png" alt="flex"></p><ul><li>flex-direction　　容器内项目的排列方向(默认横向排列)　　</li><li>flex-wrap　　容器内项目换行方式</li><li>flex-flow　　以上两个属性的简写方式</li><li>justify-content　　项目在主轴上的对齐方式</li><li>align-items　　项目在交叉轴上如何对齐</li><li>align-content　　定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><p><strong>flex-direction</strong></p><pre><code class="CSS">box { flex-direction: row | row-reverse | column | column-reverse; } </code></pre><blockquote><p>属性可选值的范围为row(默认)沿水平主轴由左向右排列、row-reverse沿水平主轴由右向左排列、column沿垂直主轴右上到下和column-reverse。</p></blockquote><p><strong>flex-wrap</strong></p><pre><code class="CSS">box{ flex-wrap: nowrap | wrap | wrap-reverse; }</code></pre><blockquote><p>属性可选值的范围为nowrap(默认)不换行、wrap换行（第一行在上方）和wrap-reverse（你懂的~真懂.）</p></blockquote><p><strong>flex-flow</strong></p><pre><code class="CSS">box { flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; }`</code></pre><blockquote><p>上述两个方法的集合</p></blockquote><p><strong>justify-content</strong></p><pre><code class="CSS">box { justify-content: flex-start | flex-end | center | space-between | space-around; }</code></pre><blockquote><p>项目在主轴上的对齐方式(主轴究竟是哪个轴要看属性flex-direction的设置了)<br>flex-start：在主轴上由左或者上开始排列<br>flex-end：在主轴上由右或者下开始排列<br>center：在主轴上居中排列<br>space-between：在主轴上左右两端或者上下两端开始排列<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p></blockquote><p><strong>align-items</strong></p><pre><code class="CSS">box { align-items: flex-start | flex-end | center | baseline | stretch; }</code></pre><blockquote><p>副轴上的布局,一般我就用了center,其他用到在学.</p></blockquote><h5 id="display的隐式CSS转换"><a href="#display的隐式CSS转换" class="headerlink" title="display的隐式CSS转换"></a>display的隐式CSS转换</h5><pre><code class="CSS">position : absolute;float : left 或 float:right;</code></pre><blockquote><p>元素会自动变为以 display:inline-block 的方式显示，当然就可以设置元素的 width 和 height 了且默认宽度不占满父元素。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java实际开发笔记①</title>
      <link href="/java%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E2%91%A0/"/>
      <url>/java%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E2%91%A0/</url>
      <content type="html"><![CDATA[<p>时间打印基于:</p><pre><code class="Java">import java.text.SimpleDateFormat;import java.util.Date;public class TimePrint {    TimePrint(){        SimpleDateFormat time = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);        System.out.println(&quot;北京时间：&quot;+ time.format(new Date())+&quot; - 郭磊&quot;);    }}</code></pre><h4 id="正式代码"><a href="#正式代码" class="headerlink" title="正式代码"></a>正式代码</h4><blockquote><p>题目:<br>第一题 用一维数组显示斐波那数列前40项，每四个数一行<br>第二题 杨辉三角 10行10列<br>第三题 数字魔方，输入3,5,7,9,11,13任意奇数，显示数字魔方<br>第四题 从键盘输入若干个double类型的数值，求平均值<br>第五题 输入如下程序代码，实现计算并输出，任意整数的平方。掌握java的输入输出。<br>第六题 从键盘输入若干个double类型的数值，求平均值<br>若输入 1 2 3 4 5 6 7 8 9 10 ABC显示10个数的平均值为5.500000<br>第七题 定义数组并初始化任意10个整数，用选择法从小到大排序。<br>第八题 定义数组并初始化任意10个整数，用冒泡法从小到大排序。<br>第九题 用以下公式求π直到最后一项小于10-6为止，显示所求的π值和循环次数。<br>第十题 输入任意整数显示如下转圈数字，处理和数字魔方类似，1到n*n填到二维数组里再显示，但要有四个方向，并且越界转向，魔方只一个方向—右上。</p></blockquote><pre><code class="Java">import java.util.Scanner;public class ClassA {    public static void main(String[] args) {        new TimePrint();        One();        Two();        Three();        FourSix();        Five();        SevenEight(false);        Night();        Ten();//        NightX();    }    public static void One() {//        第一题 用一维数组显示斐波那数列前40项，每四个数一行        System.out.print(&quot;请输入要输出的数目：&quot;);        Scanner r = new Scanner(System.in);        int n = r.nextInt();        int arr[] = new int[n];        for (int i = 0; i &lt; n; i++) {            if (i &lt; 2) {                arr[i] = 1;            } else {                arr[i] = arr[i - 1] + arr[i - 2];            }        }        for (int i = 0; i &lt; n; i++) {            System.out.printf(&quot;%10d&quot;, arr[i]);            if ((i + 1) % 5 == 0) {                System.out.println();            }        }    }    public static void Two() {//        第二题 杨辉三角 10行10列第二题 杨辉三角 10行10列        int arr[][] = new int[10][10];        for (int i = 0; i &lt; 10; i++) {            for (int j = 0; j &lt;= i; j++) {                if (i == j) {                    arr[i][j] = 1;                }                if (j == 0) {                    arr[i][0] = 1;                }                if (i &gt; 1 &amp;&amp; j &gt; 0) {                    arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];                }            }        }        for (int i = 0; i &lt; 10; i++) {            for (int j = 0; j &lt;= i; j++) {                System.out.print(arr[i][j] + &quot;\t&quot;);            }            System.out.println();        }    }    public static void Three() {        // 第三题 数字魔方，输入3,5,7,9,11,13任意奇数，显示数字魔方        System.out.println(&quot;请输入一个基数:&quot;);        Scanner r = new Scanner(System.in);        int n = r.nextInt();        if (n % 2 == 0) {            System.out.println(&quot;输入的是偶数哦！&quot;);            System.exit(0);        }        int[][] a = new int[n][n];        int row = 0;        int lin = n / 2;        for (int i = 1; i &lt;= n * n; i++) {            a[row][lin] = i;            row--;            lin++;            if (row == -1 &amp;&amp; lin &lt; n)                row = n - 1;            else if (row &gt;= 0 &amp;&amp; lin == n)                lin = 0;            else if ((row == -1 &amp;&amp; lin == n) || (a[row][lin] != 0)) {                row += 2;                lin--;            }        }        // ���        for (int i = 0; i &lt; n; i++) {            for (int j = 0; j &lt; n; j++) {                System.out.print(a[i][j] + &quot;\t&quot;);            }            System.out.println();        }    }    public static void FourSix() {        // 4.从键盘输入若干个double类型的数值，求平均值        double sum = 0;        int i = 0;        Scanner r = new Scanner(System.in);        System.out.println(&quot;等待小哥哥输入小数(求和/平均)：&quot;);        while (r.hasNextDouble()) {            double n = r.nextDouble();            sum += n;            i++;        }        System.out.printf(&quot;输入了%d个数字-&gt;  求和 = %f , 平均值 = : %f&quot;, i, sum, sum / i);    }    public static void Five() {        // 5.输入如下程序代码，实现计算并输出，任意整数的平方。掌握java的输入输出。        Scanner r = new Scanner(System.in);        System.out.print(&quot;请输入：&quot;);        int n = r.nextInt();        n *= n;        System.out.println(&quot;平方之后为：&quot; + n);    }    //排序 Start-----------------------------------------    public static void SevenEight(boolean type) {        // 排序  type = ture 选择排序   false 冒泡排序        int[] arr = new int[10];        int i = 0;        Scanner r = new Scanner(System.in);        while (i &lt; 10) {            if (r.hasNextInt()) {                arr[i] = r.nextInt();                i++;            }        }        System.out.println(&quot;交换之前：&quot;);        printIntArr(arr);        if (type) {            select(arr);        } else {            maoPao(arr);        }    }    private static void select(int[] arr) {        for (int i = 0; i &lt; arr.length - 1; i++) {// 做第i趟排序            int k = i;            for (int j = k + 1; j &lt; arr.length; j++) {// 选最小的记录                if (arr[j] &lt; arr[k]) {                    k = j; //记下目前找到的最小值所在的位置                }            }            //在内层循环结束，也就是找到本轮循环的最小的数以后，再进行交换            if (i != k) {  //交换a[i]和a[k]                int temp = arr[i];                arr[i] = arr[k];                arr[k] = temp;            }        }        System.out.println(&quot;交换后：&quot;);        printIntArr(arr);    }    private static void maoPao(int[] arr) {        for (int i = 0; i &lt; arr.length - 1; i++) {//外层循环控制排序趟数            for (int j = 0; j &lt; arr.length - 1 - i; j++) {//内层循环控制每一趟排序多少次                if (arr[j] &gt; arr[j + 1]) {                    int temp = arr[j];                    arr[j] = arr[j + 1];                    arr[j + 1] = temp;                }            }        }        System.out.println(&quot;交换后：&quot;);        printIntArr(arr);    }    private static void printIntArr(int[] arr) {        for (int num : arr) {            System.out.print(num + &quot; &quot;);        }    }    //排序 End-----------------------------------------    public static void Night() {//    用以下公式求π直到最后一项小于10-6为止，显示所求的π值和循环次数。用以下公式求π直到最后一项小于10-6为止，显示所求的π值和循环次数。        int n = 0;        double fz = 1, fm = 1, fs = 1, ji = 1, PI = 0;        do {            n++;            fm = 2 * n - 1;            if (fm &lt; 5) {                fz = 1;            } else {                fz++;            }            fs = fz / fm;            ji *= fs;            PI += ji;        } while (ji &gt; 10e-6);        System.out.println(&quot;n = &quot; + n + &quot;\nPI = &quot; + PI * 2);    }    public static void NightX(){//        int n = 1;//        double fz = 1, fm = 3, fs = 1, cj = 1, s = 1;        double x = 10e-6,y=Math.pow(10,-6);        if(x==0.000001){            System.out.println(&quot;x对（10e-6）&quot; + x);        }else if (y==0.000001){            System.out.println(&quot;y对（ Math.pow(10,-6) ）&quot; + y);        }        int a=1;//        while(cj&gt;Math.pow(10,-6)){//            fs = fz/fm;//            cj=cj*fs;//            fz++;//            fm=fm+2;//            s=s+cj;//            n++;//        }////        System.out.println(&quot;n = &quot; + n + &quot;\nPI = &quot; + s * 2);    }    public static void Ten() {        int i, j, k, a[][], hang = 0, lie = 0, fxh = 0, fxl = 1;        Scanner r = new Scanner(System.in);        j = r.nextInt();        a = new int[j][j];        for (i = 1; i &lt;= j * j; i++) {            a[hang][lie] = i;            if (j % 2 == 1) {                if (hang - lie == 1 &amp;&amp; hang &gt; lie &amp;&amp; hang &lt; j / 2 + 1) {                    fxl = 1;                    fxh = 0;                }                if (hang + lie == j - 1 &amp;&amp; hang &lt; lie) {                    fxh = 1;                    fxl = 0;                }                if (hang == lie &amp;&amp; hang &gt;= j / 2 + 1 &amp;&amp; lie &gt;= j / 2 + 1) {                    fxl = -1;                    fxh = 0;                }                if (hang + lie == j - 1 &amp;&amp; hang &gt; lie) {                    fxl = 0;                    fxh = -1;                }                hang = hang + fxh;                lie = lie + fxl;            } else {                if (hang - lie == 1 &amp;&amp; hang &gt; lie &amp;&amp; hang &lt; j / 2) {                    fxl = 1;                    fxh = 0;                }                if (hang + lie == j - 1 &amp;&amp; hang &lt; lie) {                    fxh = 1;                    fxl = 0;                }                if (hang == lie &amp;&amp; hang &gt;= j / 2 + 1 &amp;&amp; lie &gt;= j / 2) {                    fxl = -1;                    fxh = 0;                }                if (hang + lie == j - 1 &amp;&amp; hang &gt; lie) {                    fxl = 0;                    fxh = -1;                }                hang = hang + fxh;                lie = lie + fxl;            }        }        for (i = 0; i &lt; j; i++) {            for (k = 0; k &lt; j; k++)                System.out.print(a[i][k] + &quot;\t&quot;);            System.out.println();        }        r.close();    }}</code></pre>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS填坑记录 - position篇</title>
      <link href="/CSS%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95%20-%20position%E7%AF%87/"/>
      <url>/CSS%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95%20-%20position%E7%AF%87/</url>
      <content type="html"><![CDATA[<ol><li>position</li></ol><ul><li>默认为<code>static</code>，这个时候top，left等四个设置不会影响位置。</li><li><code>relative</code>，在元素本来该在的位置，通过四个定位偏移属性进行偏移。</li><li><code>absolute</code>，父元素如果为relative | absolute | fixed ，则在父元素的内部进行偏移，否则最终可以追溯到body结点。</li></ul><blockquote><p><strong>absolute的子元素称不开relative的父元素. 父元素需要自行设置高度.</strong></p></blockquote><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;positionGrandparent&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        .parent{            width: 600px;            height: 600px;            background: red;            position: relative;            top: 100px;        }        .son{            width: 300px;            height: 300px;            background: yellow;            position: static;/*默认就是static*/        }        .grandson{            width: 100px;            height: 100px;            background: blue;            position: absolute;            top: 50px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;son&quot;&gt;        &lt;div class=&quot;grandson&quot;&gt;孙子不认爹，认大爷。&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>一些position的研究：</p></blockquote><p>a. 当父元素定位为<code>relative</code>，子元素定位也为<code>relative</code>时，父元素的margin设置将可能被子元素改变。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;relative&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        .parent{            position: relative;            height: 500px;            width: 500px;            background: red;        }        .son{            position: relative;            height: 200px;            width: 200px;            background: gold;            margin: 100px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;son&quot;&gt;修改son的 margin ,父元素将生成margin-top，子元素相对于父元素垂直位置不变，水平位置生成margin。&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/13/5b99d26f0fc78.png" alt="代码演示"></p><p>b. 利用<code>position</code>来实现div垂直居中:父元素设置为<code>relative</code>,子元素设置为<code>absolute</code>。子元素top为：50%，margin-top：子元素高度的一半。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;positionMiddle&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        .parent{            position: absolute;            width: 600px;            height: 600px;            background: red;        }        .son{            position: absolute;            height: 200px;            width: 200px;            background: yellow;            /*关键代码*/            top: 50%;            margin-top: -100px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;son&quot;&gt;垂直居中&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/13/5b99d4bf7d2c2.png" alt="子元素垂直居中于父元素"></p><p>c.<code>position</code>的<code>fixed</code>的用处实践:实现全屏半透明遮帐.(或者在浏览器中固定定位,比如回到顶部)</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;positionFixed&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        .bg-block{            position: fixed;            z-index: 1;            /*四个方向都设置为0,实现全屏*/            top: 0;            right: 0;            bottom: 0;            left: 0;            background: rgba(0,0,0,.4);        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;bg-block&quot;&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2018/09/13/5b99d7e611628.png" alt="fixed"></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xpath和css的selecter的scrapy的笔记</title>
      <link href="/xpath%E5%92%8Ccss%E7%9A%84selecter%E7%9A%84scrapy%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/xpath%E5%92%8Ccss%E7%9A%84selecter%E7%9A%84scrapy%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h4><h5 id="教程中的例子："><a href="#教程中的例子：" class="headerlink" title="教程中的例子："></a>教程中的例子：</h5><ul><li>class为xxx的NODE节点</li></ul><blockquote><p>response.xpath(“//NODE[@class=’xxx’]/text()”)</p></blockquote><ul><li>class包含xxx的的NODE节点</li></ul><blockquote><p>“//NODE[contains(@class,’xxx’)]”</p></blockquote><ul><li>a标签链接为#xxx下的span</li></ul><blockquote><p>“//a[@href=’#xxx’]/span/text()”</p></blockquote><h5 id="常用表达式实例："><a href="#常用表达式实例：" class="headerlink" title="常用表达式实例："></a>常用表达式实例：</h5><p><img src="https://i.loli.net/2018/08/24/5b8029f408e5e.jpg" alt="深度影院20180824205627"><br><img src="https://i.loli.net/2018/08/24/5b802a1148da7.jpg" alt="深度影院20180824205845"><br><img src="https://i.loli.net/2018/08/24/5b802a23ec2be.jpg" alt="深度影院20180824205928"><br><img src="https://i.loli.net/2018/08/24/5b802a343aff2.jpg" alt="深度影院20180824210521"><br><img src="https://i.loli.net/2018/08/24/5b802a44c260f.jpg" alt="深度影院20180824210707"></p><hr><h5 id="parse-urljoin"><a href="#parse-urljoin" class="headerlink" title="parse.urljoin()"></a>parse.urljoin()</h5><p><img src="https://i.loli.net/2018/08/24/5b802a544d36f.jpg" alt="深度影院20180824212055"></p><h5 id="取MD5"><a href="#取MD5" class="headerlink" title="取MD5"></a>取MD5</h5><p><img src="https://i.loli.net/2018/08/24/5b802a98541d3.jpg" alt="深度影院20180824224839"></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scrapy学习笔记</title>
      <link href="/scrapy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/scrapy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="scrapy的安装以及项目新建"><a href="#scrapy的安装以及项目新建" class="headerlink" title="scrapy的安装以及项目新建"></a>scrapy的安装以及项目新建</h4><pre><code>  mkvte spider  pip install scrapy  cd /media/arley/软件/bag/Twisted-18.7.0  python setup.py install  pip install scrapy  cd ../编程/python/venv/spider/  scrapy startproject SpiderTest  cd SpiderTest/  scrapy genspider erya erya.i7xy.cn</code></pre><h4 id="scrapy在python3-7下安装Twisted关键字冲突报错问题"><a href="#scrapy在python3-7下安装Twisted关键字冲突报错问题" class="headerlink" title="scrapy在python3.7下安装Twisted关键字冲突报错问题"></a>scrapy在python3.7下安装Twisted关键字冲突报错问题</h4><p><img src="https://i.loli.net/2018/08/22/5b7d5ee5a8134.png" alt="截图"></p><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><blockquote><p>最近学Scrapy，想着用最新的python版本赶个时髦，毕竟官网发布的版本显示是支持了py37的，然鹅，没想到我还是太年轻，就算scrapy支持了，但是twisted还是凉着的，于是在运行官网tutorial的时候，有了下面的错误：</p></blockquote><pre><code>  return _bootstrap._gcd_import(name[level:], package, level)  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1006, in _gcd_import  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 983, in _find_and_load  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 967, in _find_and_load_unlocked  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 677, in _load_unlocked  File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 728, in exec_module  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 219, in _call_with_frames_removed  File &quot;/media/arley/编程/python/venv/spider/lib/python3.7/site-packages/scrapy/extensions/telnet.py&quot;, line 12, in &lt;module&gt;    from twisted.conch import manhole, telnet  File &quot;/media/arley/编程/python/venv/spider/lib/python3.7/site-packages/Twisted-18.7.0-py3.7-linux-x86_64.egg/twisted/conch/manhole.py&quot;, line 154    def write(self, data, async=False):                              ^</code></pre><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>在上面的报错中，可以看到，错误来源很是奇怪，报的是语法错误，辛亏我早先有看过py37的新特性，早先在py35发行时就提出的PEP 492提案，终于在py37中正式生效（以前的版本中也有，但是得from <strong>future</strong> import generator_stop）。在这个提案中，有一条就是：将协程的概念从生成器中拎了出来，并添加了新的关键词async\await。到这里终于明白了，错误就来自这：async是py37的关键词，不能作为关键字参数。修改方法也很简单，把Python37\lib\site-packages\twisted\conch\manhole.py中全部的async修改为其他非py37关键词的名称。</p><hr><h4 id="切换版本为3-6-gt-scrapy流程梳理"><a href="#切换版本为3-6-gt-scrapy流程梳理" class="headerlink" title="切换版本为3.6 -&gt; scrapy流程梳理"></a>切换版本为3.6 -&gt; scrapy流程梳理</h4><div id="flowchart-0" class="flow-chart"></div><h4 id="一些库的安装"><a href="#一些库的安装" class="headerlink" title="一些库的安装"></a>一些库的安装</h4><ul><li><p>MysqlDb: <code>pip install mysqlclient</code></p><blockquote><p>安装之前可能需要 sudo apt-get install python3-dev</p></blockquote></li><li><p>Requests:<code>pip install requests</code><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 新建scrapy项目-> scrapy startproject SpiderTeste=>end: 存储完毕op1=>operation: 项目根目录下新建爬虫->  scrapy genspider [爬虫名称] [爬虫链接]op2=>operation: 进入新建的类（爬虫名称中）设置一系列的爬取规则 将爬取的数据通过yield [item.py下的某个Item类]op3=>operation: pipelines根据setting对item进行处理，存储st->op1->op2->op3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p></li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的虚拟环境virtualenv/virtualenvwrapper的安装和配置</title>
      <link href="/python%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv-virtualenvwrapper%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/python%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83virtualenv-virtualenvwrapper%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><blockquote><p>virtualenv 是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.7 / python3.7 ，但是如果都装到一起，经常会导致问题。所以需要一个工具能够将这两种或几种不同版本的环境隔离开来，需要哪个版本就切换到哪个版本做为默认版本。virtualenv 既是满足这个需求的工具。它能够用于创建独立的Python环境，多个Python相互独立，互不影响，能够：</p></blockquote><ul><li>在没有权限的情况下安装新套件</li><li>不同应用可以使用不同的套件版本</li><li>套件升级不影响其他应用</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre><code>pip install virtualenv --user</code></pre><p>使用方法<br>1.创建环境<br><code>virtualenv [新环境名]</code> :这会再当前目录下创建一个新环境目录<br>可使用 <code>virtualenv --help</code> 来查看如何使用。可以使用参数 –python=/usr/bin/python3 来创建一个已经安装的的Python环境。</p><p>2.使用环境<br>切换到新环境目录<br>执行：<code>source ./bin/activate</code> 来激活环境，激活后在命令行的前面会出现新环境名称<br>接下来可使用pip命令安装新环境需要的各种包。（pip命令在创建新环境时自带）<br>3.退出虚拟环境<br><code>deactivate</code><br>如果要删除虚拟环境，只需退出虚拟环境后，删除对应的虚拟环境目录即可。不影响其他环境。<br>4.注意事项<br>如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：export PIP_REQUIRE_VIRTUALENV=true<br>或者让在执行pip的时候让系统自动开启虚拟环境：export PIP_RESPECT_VIRTUALENV=true</p><h4 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h4><blockquote><p>virtualenvwrapper是virtualenv的扩展管理包，用于更方便管理虚拟环境，它可以做：</p></blockquote><ul><li>将所有虚拟环境整合在一个目录下</li><li>管理（新增，删除，复制）虚拟环境</li><li>切换虚拟环境</li></ul><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><pre><code>pip install virtualenvwrapper --user</code></pre><p>使用方法<br>1.初始配置<br>默认virtualenvwrapper安装在/usr/local/bin下面，实际上需要运行virtualenvwrapper.sh文件才行；所以需要先进行配置一下：</p><blockquote><p>我的安装路径为：/home/arley/.local/bin/virtualenvwrapper.sh</p></blockquote><p>创建虚拟环境管理目录: mkdir $HOME/.local/virtualenvs</p><blockquote><p>我的管理路径为：/media/arley/编程/python/venv</p></blockquote><p>在~/.bashrc中添加行：<code>vim ~/.bashrc</code></p><pre><code>export VIRTUALENV_USE_DISTRIBUTE=1        #  总是使用 pip/distribute          export WORKON_HOME=$HOME/.local/virtualenvs       # 所有虚拟环境存储的目录            if [ -e $HOME/.local/bin/virtualenvwrapper.sh ];then      source $HOME/.local/bin/virtualenvwrapper.shelse if [ -e /usr/local/bin/virtualenvwrapper.sh ];then      source /usr/local/bin/virtualenvwrapper.sh                                      fi                                                                     fi                                                            export PIP_VIRTUALENV_BASE=$WORKON_HOMEexport PIP_RESPECT_VIRTUALENV=true</code></pre><p><img src="https://i.loli.net/2018/08/20/5b7ac195a10aa.png" alt="配置截图"></p><p>启动 virtualenvwrapper: <code>source ~/.bashrc</code></p><p>2.使用方法<br>所有的命令可使用：<code>virtualenvwrapper --help</code> 进行查看，这里列出几个常用的：</p><ul><li>创建基本环境：mkvirtualenv [环境名]</li><li>删除环境：rmvirtualenv [环境名]</li><li>激活环境：workon [环境名]</li><li>退出环境：deactivate</li><li>列出所有环境：workon 或者 lsvirtualenv -b</li></ul><p>配上我的别名设置：</p><pre><code># virtualenv     alias vte=&#39;virtualenv&#39;alias mkvte=&#39;mkvirtualenv&#39;   alias deact=&#39;deactivate&#39;alias rmvte=&#39;rmvirtualenv&#39;</code></pre><p>所有命令都可在后面使用 –help 参数查看具体用法！</p><blockquote><p> ~/.bashrc 文件和  ~/.bash_profile（配置别名）</p></blockquote><h4 id="安装scrapy框架"><a href="#安装scrapy框架" class="headerlink" title="安装scrapy框架"></a>安装scrapy框架</h4><blockquote><p>twisted 报错 （下载并解压：/media/arley/软件/bag/Twisted-18.7.0）<br>下载地址：<a href="https://twistedmatrix.com/Releases/Twisted/18.7/Twisted-18.7.0.tar.bz2" target="_blank" rel="noopener">https://twistedmatrix.com/Releases/Twisted/18.7/Twisted-18.7.0.tar.bz2</a></p></blockquote><p>在vte（workon 项目）中执行安装<br>(test) arley@arley-PC:/media/arley/软件/bag/Twisted-18.7.0$ <code>python setup.py install</code></p><p>再一次执行安装</p><pre><code>pip install scrapy</code></pre>]]></content>
      
      <categories>
          
          <category> 技巧备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python生成大学全部学号</title>
      <link href="/python%E7%94%9F%E6%88%90%E5%A4%A7%E5%AD%A6%E5%85%A8%E9%83%A8%E5%AD%A6%E5%8F%B7/"/>
      <url>/python%E7%94%9F%E6%88%90%E5%A4%A7%E5%AD%A6%E5%85%A8%E9%83%A8%E5%AD%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<blockquote><p>需要用到大学里面所有的学号序列，只有通过编程自己生成，以前用<code>易语言</code>生成的，生成一次1500+学号并输出需要接近一分钟，数据处理和存储的方式，相比python，完全就是low爆了。本次用python来生成，速度在1ms之内 - 惊到我了。</p></blockquote><p>先学习记录一个学习笔记</p><h4 id="python获取程序运行消耗时间："><a href="#python获取程序运行消耗时间：" class="headerlink" title="python获取程序运行消耗时间："></a>python获取程序运行消耗时间：</h4><p>方法1</p><pre><code class="python">import datetimestarttime = datetime.datetime.now()# run_fun()endtime = datetime.datetime.now()print (endtime - starttime).seconds</code></pre><p>方法 2 </p><blockquote><p>我使用了这个方法。</p></blockquote><pre><code class="python">import timestart = int(time.time())# run_fun()end = int(time.time())print(&#39;耗费时间： &#39; + str(end-start)+&#39;ms&#39;)</code></pre><p>方法3</p><pre><code class="python">import timestart = time.clock()# run_fun()end = time.clock()print(&#39;耗费时间： &#39; + str(end-start)+&#39;ms&#39;)</code></pre><blockquote><p><strong>方法1和方法2都包含了其他程序使用CPU的时间，是程序开始到程序结束的运行时间。方法3算只计算了程序运行的CPU时间</strong></p></blockquote><h4 id="生成学号代码"><a href="#生成学号代码" class="headerlink" title="生成学号代码"></a>生成学号代码</h4><pre><code class="python">import timeclass stuNum():    numDic = [        {&#39;id&#39;: &#39;01024&#39;, &#39;name&#39;: &#39;矿物&#39;},        {&#39;id&#39;: &#39;01034&#39;, &#39;name&#39;: &#39;化工&#39;},        {&#39;id&#39;: &#39;01054&#39;, &#39;name&#39;: &#39;环境&#39;},        {&#39;id&#39;: &#39;01064&#39;, &#39;name&#39;: &#39;材科&#39;},        {&#39;id&#39;: &#39;02014&#39;, &#39;name&#39;: &#39;电气&#39;},        {&#39;id&#39;: &#39;02024&#39;, &#39;name&#39;: &#39;机制&#39;},        {&#39;id&#39;: &#39;02034&#39;, &#39;name&#39;: &#39;材控&#39;},        {&#39;id&#39;: &#39;03014&#39;, &#39;name&#39;: &#39;电信&#39;},        {&#39;id&#39;: &#39;03024&#39;, &#39;name&#39;: &#39;自动&#39;},        {&#39;id&#39;: &#39;03034&#39;, &#39;name&#39;: &#39;通信&#39;},        {&#39;id&#39;: &#39;03064&#39;, &#39;name&#39;: &#39;建电&#39;},        {&#39;id&#39;: &#39;03044&#39;, &#39;name&#39;: &#39;信息&#39;},        {&#39;id&#39;: &#39;04014&#39;, &#39;name&#39;: &#39;国贸&#39;},        {&#39;id&#39;: &#39;04024&#39;, &#39;name&#39;: &#39;工商&#39;},        {&#39;id&#39;: &#39;04034&#39;, &#39;name&#39;: &#39;营销&#39;},        {&#39;id&#39;: &#39;04044&#39;, &#39;name&#39;: &#39;会计&#39;},        {&#39;id&#39;: &#39;04064&#39;, &#39;name&#39;: &#39;电商&#39;},        {&#39;id&#39;: &#39;05024&#39;, &#39;name&#39;: &#39;土木&#39;},        {&#39;id&#39;: &#39;05064&#39;, &#39;name&#39;: &#39;测绘&#39;},        {&#39;id&#39;: &#39;05104&#39;, &#39;name&#39;: &#39;建能&#39;},        {&#39;id&#39;: &#39;05084&#39;, &#39;name&#39;: &#39;工管&#39;},        {&#39;id&#39;: &#39;05094&#39;, &#39;name&#39;: &#39;工管&#39;},        {&#39;id&#39;: &#39;06014&#39;, &#39;name&#39;: &#39;汉语&#39;},        {&#39;id&#39;: &#39;06024&#39;, &#39;name&#39;: &#39;新闻&#39;},        {&#39;id&#39;: &#39;06034&#39;, &#39;name&#39;: &#39;法学&#39;},        {&#39;id&#39;: &#39;06064&#39;, &#39;name&#39;: &#39;汉教&#39;},        {&#39;id&#39;: &#39;06074&#39;, &#39;name&#39;: &#39;秘书&#39;},        {&#39;id&#39;: &#39;06084&#39;, &#39;name&#39;: &#39;网媒&#39;},        {&#39;id&#39;: &#39;07014&#39;, &#39;name&#39;: &#39;计科&#39;},        {&#39;id&#39;: &#39;07024&#39;, &#39;name&#39;: &#39;网络&#39;},        {&#39;id&#39;: &#39;07034&#39;, &#39;name&#39;: &#39;信管&#39;},        {&#39;id&#39;: &#39;07044&#39;, &#39;name&#39;: &#39;软件&#39;},        {&#39;id&#39;: &#39;07054&#39;, &#39;name&#39;: &#39;物联&#39;},        {&#39;id&#39;: &#39;07074&#39;, &#39;name&#39;: &#39;网安&#39;},        {&#39;id&#39;: &#39;08014&#39;, &#39;name&#39;: &#39;英语&#39;},        {&#39;id&#39;: &#39;08024&#39;, &#39;name&#39;: &#39;日语&#39;},        {&#39;id&#39;: &#39;09014&#39;, &#39;name&#39;: &#39;计算&#39;},        {&#39;id&#39;: &#39;09024&#39;, &#39;name&#39;: &#39;统计&#39;},        {&#39;id&#39;: &#39;10014&#39;, &#39;name&#39;: &#39;采矿&#39;},        {&#39;id&#39;: &#39;10044&#39;, &#39;name&#39;: &#39;安全&#39;},        {&#39;id&#39;: &#39;10064&#39;, &#39;name&#39;: &#39;地质&#39;},        {&#39;id&#39;: &#39;10074&#39;, &#39;name&#39;: &#39;安职&#39;},        {&#39;id&#39;: &#39;11024&#39;, &#39;name&#39;: &#39;社体&#39;},        {&#39;id&#39;: &#39;12014&#39;, &#39;name&#39;: &#39;设计&#39;}    ]    def create_num(self, grade):        i = 1        for item in self.numDic:            for x in range(1, 36):                if len(str(x)) &lt; 2:                    x = &#39;0&#39; + str(x)                print(str(i)+&#39; : &#39;+grade +                      item[&#39;id&#39;] + str(x)+&#39;---&#39;+item[&#39;name&#39;])                i += 1start = int(time.time())x = stuNum()x.create_num(&#39;2017&#39;)end = int(time.time())print(&#39;耗费时间： &#39; + str(end-start)+&#39;ms&#39;)</code></pre><p><img src="https://i.loli.net/2018/08/19/5b792555a30c4.png" alt="&#39;RunTime&#39;"></p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python第一次爬虫实践 原生爬尔雅题目</title>
      <link href="/python%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E5%8E%9F%E7%94%9F%E7%88%AC%E5%B0%94%E9%9B%85%E9%A2%98%E7%9B%AE/"/>
      <url>/python%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-%E5%8E%9F%E7%94%9F%E7%88%AC%E5%B0%94%E9%9B%85%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>啦啦啦，经过3天的python学习，是时候实践一番了，将以前写的爬尔雅题库的<code>易语言</code>转成python代码，算是完全重写。</p><blockquote><p>通过尔雅课程的courseId，获取科目课程的所有题目。（不含答案，不含sql，纯原生爬取，输出代码）</p></blockquote><p><img src="https://i.loli.net/2018/08/15/5b7403d689e17.png" alt="运行截图]"></p><h4 id="爬取步骤："><a href="#爬取步骤：" class="headerlink" title="爬取步骤："></a>爬取步骤：</h4><blockquote><p><a href="http://erya.mooc.chaoxing.com/courses" target="_blank" rel="noopener">尔雅课程地址：http://erya.mooc.chaoxing.com/courses</a></p></blockquote><h5 id="关键参数："><a href="#关键参数：" class="headerlink" title="关键参数："></a>关键参数：</h5><ul><li>courseId 课程的id</li><li>knowledgeId = data(“xxx”) 课程每一节的id，knowledgeId在域名链接中，data为跳转到其他小节的课程</li><li>workId 小节题目的id</li></ul><ol><li>随便进入一门课程，课程链接组成为:<a href="https://mooc1.chaoxing.com/course/200837021.html" target="_blank" rel="noopener">https://mooc1.chaoxing.com/course/200837021.html</a></li></ol><blockquote><p><a href="https://mooc1.chaoxing.com/course/coursesId(课程ID).html" target="_blank" rel="noopener">https://mooc1.chaoxing.com/course/coursesId(课程ID).html</a></p></blockquote><ol start="2"><li>由于要进入到类似 <a href="https://mooc1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=200080607&amp;knowledgeId=102433017" target="_blank" rel="noopener">https://mooc1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=200080607&amp;knowledgeId=102433017</a> 的一个页面，需要knowledgeId，第一次的这个id只能由第一步的地址的代码中拿，不然无法进入类似这一步的地址</li></ol><blockquote><p>在第一步地址中，先获取knowledgeId进入第二步，才算是正式开始抓取<img src="https://i.loli.net/2018/08/15/5b73ffad09296.png" alt="第一节的knowledgeId，跳转至第二部的地址"></p></blockquote><ol start="3"><li>进入之后目录结构部分课程比较复杂，所以爬虫遍历的方法算是很独特的。<br><img src="https://i.loli.net/2018/08/15/5b740135d728a.png" alt="小节目录，在页面中data不全"></li></ol><blockquote><p>在网站源代码中有data=“xxx”  xxx就是knowledgeId，由于部分课程可能不展开，所以id不全，爬取方法，每一次爬取之后，获取当前爬的id的下一个id，进入下一节，保证不丢小节课程</p></blockquote><ol start="4"><li>进入小节页面之后，抓包找到题目包。<br><img src="https://i.loli.net/2018/08/15/5b74028468474.png" alt="selectWorkQuestion接口"></li></ol><blockquote><p>其他基本就是整理工作了，几个正则表达式完美解决，贴出完整代码，仅供学习所用。</p></blockquote><h4 id="爬尔雅题目完整代码："><a href="#爬尔雅题目完整代码：" class="headerlink" title="爬尔雅题目完整代码："></a>爬尔雅题目完整代码：</h4><pre><code class="python">import refrom urllib import requestfrom urllib import errorclass Mooc:    urlInit = &#39;https://mooc1.chaoxing.com/course/{{courseId}}.html&#39;    urlK = &#39;https://mooc1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId={{courseId}}&amp;knowledgeId={{knowledgeId}}&#39;    workUrl = &#39;https://mooc1.chaoxing.com/api/selectWorkQuestion?workId={{workId}}&amp;ut=null&amp;classId=0&amp;courseId={{courseId}}&amp;utenc=null&#39;    headers = {        &#39;User-Agent&#39;: r&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;        r&#39;Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3&#39;    }    def __returnWorkUrl(self, courseId, workId):        url = self.workUrl.replace(&#39;{{courseId}}&#39;, courseId).replace(            &#39;{{workId}}&#39;, workId)        return url    def __getRequest(self, url):        req = request.Request(url, headers=Mooc.headers)        try:            page = request.urlopen(req).read()            page = page.decode(&#39;utf-8&#39;)            return page        except error.URLError as e:            print(&#39;courseId可能不存在哦！&#39;, e.reason)            exit()    def __getFristData(self, courseId):        # 组装初始URL，获取第一个包含knowledge        url = self.urlInit.replace(&#39;{{courseId}}&#39;, courseId)        htmls = self.__getRequest(url)        # &lt;a class=&quot;wh nodeItem&quot;  href=&quot;?courseId=200080607&amp;knowledgeId=102433017&quot; data=&quot;102433017&quot;&gt;        #re_rule = &#39;courseId=&#39;+courseId+&#39;&amp;knowledgeId=(.*)&quot;&gt;&#39;# &lt;div id=&quot;&quot; class=&quot;ml20 mb5  bgf3  mr10&quot; data=&quot;102432997&quot;&gt;# &lt;div id=&quot;courseChapterSelected&quot; class=&quot;ml20 bbe pl0 bg1e mr10&quot; data=&quot;102433017&quot; rel=&quot;&quot;&gt;        re_rule = &#39;courseId=&#39;+courseId+&#39;&amp;knowledgeId=(.*)&quot;&gt;&#39;        url_frist = re.findall(re_rule, htmls)        if len(url_frist) &gt; 0:            return url_frist[0]        else:            print(&#39;courseId错误！&#39;)    def __returnTitle(self, courseId, knowledgeId):        url = self.urlK.replace(&#39;{{courseId}}&#39;, courseId).replace(            &#39;{{knowledgeId}}&#39;, knowledgeId)        htmls = self.__getRequest(url)        re_rule = &#39;&amp;quot;:&amp;quot;work-(.*?)&amp;quot;&#39;        wordId = re.findall(re_rule, htmls)        wordId = list(set(wordId))  # 先转集合，再转队列  去重复        title = []        for x in wordId:            wordUrl = self.__returnWorkUrl(courseId, x)            html_work = self.__getRequest(wordUrl)            title_rule = &#39;&lt;div class=&quot;Zy_TItle clearfix&quot;&gt;\s*&lt;i class=&quot;fl&quot;&gt;.*&lt;/i&gt;\s*&lt;div class=&quot;.*&quot;&gt;(.*?)&lt;/div&gt;&#39;            title = title + re.findall(title_rule, html_work)# &lt;div id=&quot;&quot; class=&quot;ml20 mb5  bgf3  mr10&quot; data=&quot;102432997&quot;&gt;# &lt;div id=&quot;courseChapterSelected&quot; class=&quot;ml20 bbe pl0 bg1e mr10&quot; data=&quot;102433017&quot; rel=&quot;&quot;&gt;        #re_rule = &#39;&lt;a class=&quot;.*&quot;  href=&quot;\?courseId=&#39; + courseId+&#39;&amp;knowledgeId=.*&quot; data=&quot;(.*)&quot;&gt;&#39;        # re_rule = &#39;&lt;div id=&quot;(courseChapterSelected)?&quot; class=&quot;[\s\S]*?&quot; data=&quot;(\d*)&quot;&gt;?&#39;        re_rule = &#39;&lt;div id=&quot;c?o?u?r?s?e?C?h?a?p?t?e?r?S?e?l?e?c?t?e?d?&quot; class=&quot;[\s\S]*?&quot; data=&quot;(\d*)&quot;&gt;?&#39;        datas = re.findall(re_rule, htmls)        return(title, datas)    def getTextByCourseId(self, courseId):        data_now = self.__getFristData(courseId)  # 第一个data需要再单独的一个链接里获取        j = 1        while data_now:            listR = self.__returnTitle(courseId, data_now)            title = listR[0]            data = listR[1]            for i, x in enumerate(data):                if data_now == x:                    if len(data) &gt; (i+1):                        data_now = data[i+1]                    else:                        data_now = None                        print(&#39;获取题目结束.&#39;)                    break            # 打印题目  去除题目中的&lt;p&gt;&lt;/p&gt;获取其他标签，只有部分题目有，可能是尔雅自己整理时候加入的。            for t in title:                p_rule = &#39;&lt;.*?&gt;&#39;                t = re.sub(p_rule, &#39;&#39;, t)                p_rule = &#39;&amp;.*?;&#39;                t = re.sub(p_rule, &#39;&#39;, t)                print(j, t)                j += 1mooc = Mooc()courseId = &#39;200080607&#39;#input(&#39;请输入courseId:&#39;)  # &#39;200837021&#39;  200080607 = 189题if courseId:    mooc.getTextByCourseId(courseId)else:    print(&#39;请输入正确的courseId.&#39;)</code></pre>]]></content>
      
      <categories>
          
          <category> 实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 实战笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux学习笔记-3（vim编辑器学习）</title>
      <link href="/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3%EF%BC%88vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%89/"/>
      <url>/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3%EF%BC%88vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>学习参考书籍：<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">《Linux就该这么学》</a></strong></p><h4 id="vim三种模式的操作区别以及模式之间的切换方法："><a href="#vim三种模式的操作区别以及模式之间的切换方法：" class="headerlink" title="vim三种模式的操作区别以及模式之间的切换方法："></a>vim三种模式的操作区别以及模式之间的切换方法：</h4><ul><li>命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。</li><li>输入模式：正常的文本录入。</li><li>末行模式：保存或退出文档，以及设置编辑环境。</li></ul><p><img src="https://i.loli.net/2018/08/10/5b6d3e4084012.png" alt="切换快捷键"></p><blockquote><p>　在每次运行 Vim 编辑器时，默认进入命令模式，此时需要先切换到输入模式后再进行文档编写工作，而每次在编写完文档后需要先返回命令模式，然后再进入末行模式，执行文档的保存或退出操作。在 Vim 中，无法直接从输入模式切换到末行模式。</p></blockquote><h4 id="命令模式常用命令"><a href="#命令模式常用命令" class="headerlink" title="命令模式常用命令"></a>命令模式常用命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dd</td><td>删除（剪切）光标所在整行</td></tr><tr><td>5dd</td><td>删除（剪切）从光标处开始的 5 行</td></tr><tr><td>yy</td><td>复制光标所在整行</td></tr><tr><td>5yy</td><td>复制从光标处开始的 5 行</td></tr><tr><td>n</td><td>显示搜索命令定位到的下一个字符串</td></tr><tr><td>N</td><td>显示搜索命令定位到的上一个字符串</td></tr><tr><td>u</td><td>撤销上一步的操作</td></tr><tr><td>p</td><td>将之前删除（dd）或复制（yy）过的数据粘贴到光标后面</td></tr></tbody></table><h4 id="末行模式中可用的命令"><a href="#末行模式中可用的命令" class="headerlink" title="末行模式中可用的命令"></a>末行模式中可用的命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:q!</td><td>强制退出（放弃对文档的修改内容）</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>不显示行号</td></tr><tr><td>:命令</td><td>执行该命令</td></tr><tr><td>:整数</td><td>跳转到该行</td></tr><tr><td>:ｓ/one/two</td><td>将当前光标所在行的第一个 one 替换成 two</td></tr><tr><td>:ｓ/one/two/g</td><td>将当前光标所在行的所有 one 替换成 two</td></tr><tr><td>:%s/one/two/g</td><td>将全文中的所有 one 替换成 two</td></tr><tr><td>?字符串</td><td>在文本中从下至上搜索该字符串</td></tr><tr><td>/字符串</td><td>在文本中从上至下搜索该字符串</td></tr></tbody></table><h4 id="vim实操"><a href="#vim实操" class="headerlink" title="vim实操"></a>vim实操</h4><ol><li><p>vim xxx.txt (创建或打开xxx.txt) - practice.txt</p><blockquote><p>打开 practice.txt 文档后，默认进入的是 Vim 编辑器的命令模式。此时只能执行该模式下的命令，而不能随意输入文本内容，我们需要切换到输入模式才可以编写文档。<br>可以分别使用 a、 i、 o 三个键从命令模式切换到输入模式。其中， a 键<br>与 i 键分别是在光标后面一位和光标当前位置切换到输入模式，而 o 键则是在光标的下面再创建一个空行，此时可敲击 a 键进入到编辑器的输入模式。</p></blockquote></li><li><p>在编写完之后，想要保存并退出，必须先敲击键盘 Esc 键从输入模式返回命令模式。然后再输入:wq!切换到末行模式才能完成保存退出操作。</p></li></ol><p><img src="https://i.loli.net/2018/08/10/5b6d424f71159.png" alt="操作截图]"></p><h4 id="vim编写简单的shell-sh-脚本"><a href="#vim编写简单的shell-sh-脚本" class="headerlink" title="vim编写简单的shell(.sh)脚本"></a>vim编写简单的shell(.sh)脚本</h4><p><img src="https://i.loli.net/2018/08/10/5b6d44a83f65c.png" alt="文件里的内容"></p><pre><code>#!/bin/bash#For Example BY linuxprobe.compwdls -al</code></pre><blockquote><p>Shell 脚本文件的名称可以任意，但为了避免被误以为是普通文件，建议将.sh 后缀加上，以表示是一个脚本文件。在上面的这个 example.sh 脚本中实际上出现了三种不同的元素：第一行的脚本声明（#!）用来告诉系统使用哪种 Shell 解释器来执行该脚本；第二行的注释信息（#）是对脚本功能和某些命令的介绍信息，使得自己或他人在日后看到这个脚本内容时，可以快速知道该脚本的作用或一些警告信息；第三、四行的可执行语句也就是我们平时执行的 Linux 命令了。</p></blockquote><p>执行脚本：bash example.sh<br><img src="https://i.loli.net/2018/08/10/5b6d452f0718a.png" alt="脚本执行"></p><p>给shell脚本存入参数：</p><blockquote><p>例如\$0 对应的是当前 Shell 脚本程序的名称， \$#对应的是总共<br>有几个参数， \$*对应的是所有位置的参数值， \$?对应的是显示上一次命令的执行返回值，而\$1、\$2、 \$3……则分别对应着第 N 个位置的参数值</p></blockquote><pre><code>#!/bin/bashecho &quot;当前脚本名称为$0&quot;echo &quot;总共有$#个参数，分别是$*。 &quot;echo &quot;第 1 个参数为$1，第 5 个为$5。 &quot;</code></pre><p><img src="https://i.loli.net/2018/08/10/5b6d46ddb8396.png" alt="深度截图_deepin-terminal_20180810160325"></p><blockquote><p>书中第四章（p100+）有很多ｓｈｅｌｌ编程知识[if、for、定时任务执行……]，不做深入。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux学习笔记-2(常用命令)</title>
      <link href="/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2%EF%BC%88%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/"/>
      <url>/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2%EF%BC%88%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>学习参考书籍：<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">《Linux就该这么学》</a></strong></p><blockquote><p>新手必须掌握的Linux命令：本章首先介绍系统内核和Shell终端的关系与作用，然后介绍bash解释器的4大优势并学习Linux命令的执行方法。本章还精挑细选了数十个Linux命令，它们与系统工作、系统状态、工作目录、文件、目录、打包压缩与搜索等主题相关。学习这些最基础的Linux命令，可以为今后学习更复杂的命令和服务做好必备知识铺垫。</p></blockquote><h4 id="man-获取帮助"><a href="#man-获取帮助" class="headerlink" title="man 获取帮助"></a>man 获取帮助</h4><blockquote><p>man +命令  <code>获取某条命令的帮助，比如 man ls</code></p></blockquote><ol><li>帮助文档快捷键操作</li></ol><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>PaGe down</td><td>向下翻一页</td></tr><tr><td>PaGe up</td><td>向上翻一页</td></tr><tr><td>home</td><td>直接前往首页</td></tr><tr><td>end</td><td>直接前往尾页</td></tr><tr><td>/</td><td>从上至下搜索某个关键词，如“ /linux”</td></tr><tr><td>?</td><td>从下至上搜索某个关键词，如“ ?linux”</td></tr><tr><td>n</td><td>定位到下一个搜索到的关键词</td></tr><tr><td>N</td><td>定位到上一个搜索到的关键词</td></tr><tr><td>q</td><td>退出帮助文档</td></tr></tbody></table><ol start="2"><li>帮助文档翻译</li></ol><table><thead><tr><th>字符串</th><th>翻译</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称</td></tr><tr><td>SYNOPSIS</td><td>参数的大致使用方法</td></tr><tr><td>DESCRIPTION</td><td>介绍说明</td></tr><tr><td>EXAMPLES</td><td>演示（附带简单说明）</td></tr><tr><td>OVERVIEW</td><td>概述</td></tr><tr><td>DEFAULTS</td><td>默认的功能</td></tr><tr><td>OPTIONS</td><td>具体的可用选项（带介绍）</td></tr><tr><td>ENVIRONMENT</td><td>环境变量</td></tr><tr><td>FILES</td><td>用到的文件</td></tr><tr><td>SEE ALSO</td><td>相关的资料</td></tr><tr><td>HISTORY</td><td>维护历史与联系方式</td></tr></tbody></table><h4 id="echo-输出命令"><a href="#echo-输出命令" class="headerlink" title="echo 输出命令"></a>echo 输出命令</h4><blockquote><p>命令用于在终端输出字符串或变量提取后的值，格式为“ echo [字符串 | \$变量]”。<br>例如，把指定字符串“ i7xy.cn”输出到终端屏幕的命令为：<br>[root@linuxprobe ~]# echo i7xy.cn<br>该命令会在终端屏幕上显示如下信息：<br>i7xy.cn<br>下面，我们使用$变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：<br>[root@linuxprobe ~]# echo \$SHELL  (区分大小写)<br>/bin/bash</p></blockquote><h4 id="date-时间命令"><a href="#date-时间命令" class="headerlink" title="date 时间命令"></a>date 时间命令</h4><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>%t</td><td>跳格[Tab 键]</td></tr><tr><td>%H</td><td>小时（00～23）</td></tr><tr><td>%I</td><td>小时（00～12）</td></tr><tr><td>%M</td><td>分钟（00～59）</td></tr><tr><td>%S</td><td>秒（00～59）</td></tr><tr><td>%j</td><td>今年中的第几天</td></tr></tbody></table><ol><li>现在的时间</li></ol><blockquote><p>arley@arley-PC:~$ date<br>2018年 08月 09日 星期四 20:51:17 CST</p></blockquote><ol start="2"><li>按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间</li></ol><blockquote><p>arley@arley-PC:~$ date “+%Y-%m-%d %H:%M:%S 今年中的第%j天”<br>2018-08-09 20:53:55 今年中的第221天</p></blockquote><ol start="3"><li>将系统的当前时间设置为 2017 年 9 月 1 日 8 点 30 分的 date 命令如下所示：</li></ol><blockquote><p>arley@arley-PC:~$ date -s “20170901 8:30:00”<br>Fri Sep 1 08:30:00 CST 2017</p></blockquote><h4 id="系统电源"><a href="#系统电源" class="headerlink" title="系统电源"></a>系统电源</h4><ol><li>重启 reboot</li><li>关机 poweroff</li></ol><h4 id="wget-下载操作"><a href="#wget-下载操作" class="headerlink" title="wget 下载操作"></a>wget 下载操作</h4><blockquote><p>arley@arley-PC:~/Downloads$ wget <a href="http://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">http://www.linuxprobe.com/docs/LinuxProbe.pdf</a><br>–2018-08-09 21:01:17–  <a href="http://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">http://www.linuxprobe.com/docs/LinuxProbe.pdf</a><br>正在解析主机 <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a> (<a href="http://www.linuxprobe.com).." target="_blank" rel="noopener">www.linuxprobe.com)..</a>. 124.193.226.211, 124.193.226.219, 124.193.226.220, …<br>正在连接 <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a> (<a href="http://www.linuxprobe.com)|124.193.226.211|:80.." target="_blank" rel="noopener">www.linuxprobe.com)|124.193.226.211|:80..</a>. 已连接。<br>已发出 HTTP 请求，正在等待回应… 301 Moved Permanently<br>位置：<a href="https://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">https://www.linuxprobe.com/docs/LinuxProbe.pdf</a> [跟随至新的 URL]<br>–2018-08-09 21:01:17–  <a href="https://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">https://www.linuxprobe.com/docs/LinuxProbe.pdf</a><br>正在连接 <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a> (<a href="http://www.linuxprobe.com)|124.193.226.211|:443.." target="_blank" rel="noopener">www.linuxprobe.com)|124.193.226.211|:443..</a>. 已连接。<br>已发出 HTTP 请求，正在等待回应… 200 OK<br>长度：20105266 (19M) [application/pdf]<br>正在保存至: “LinuxProbe.pdf”<br>LinuxProbe.pdf             100%[========================================&gt;]  19.17M  2.06MB/s  用时 8.6s<br>2018-08-09 21:01:26 (2.24 MB/s) - 已保存 “LinuxProbe.pdf” [20105266/20105266])</p></blockquote><blockquote><p>接下来，我们使用 wget 命令递归下载 <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a> 网站内的所有页面数据以及<br>文件，下载完后会自动保存到当前路径下一个名为 <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">www.linuxprobe.com</a> 的目录中。执行该操<br>作的命令为 wget -r -p <a href="http://www.linuxprobe.com，该命令的执行结果如下。" target="_blank" rel="noopener">http://www.linuxprobe.com，该命令的执行结果如下。</a><br>[root@linuxprobe ~]# wget -r -p <a href="http://www.linuxprobe.com" target="_blank" rel="noopener">http://www.linuxprobe.com</a><br>–2017-08-24 19:31:41– <a href="http://www.linuxprobe.com/" target="_blank" rel="noopener">http://www.linuxprobe.com/</a><br>Resolving <a href="http://www.linuxprobe.com.." target="_blank" rel="noopener">www.linuxprobe.com..</a>. 106.185.25.197<br>Connecting to <a href="http://www.linuxprobe.com|106.185.25.197|:80.." target="_blank" rel="noopener">www.linuxprobe.com|106.185.25.197|:80..</a>. connected.<br>HTTP request sent, awaiting response… 200 OK<br>Length: unspecified [text/html]<br>Saving to: ‘<a href="http://www.linuxprobe.com/index.html&#39;" target="_blank" rel="noopener">www.linuxprobe.com/index.html&#39;</a><br>………………省略下载过程………………</p></blockquote><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-b</td><td>后台下载模式</td></tr><tr><td>-P</td><td>下载到指定目录</td></tr><tr><td>-t</td><td>最大尝试次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table><h4 id="进程管理显示"><a href="#进程管理显示" class="headerlink" title="进程管理显示"></a>进程管理显示</h4><ol><li>初级：ps</li><li>类似win的进程管理：top</li><li>pidof 命令<blockquote><p>用于查询某个指定服务进程的 PID 值，格式为“ pidof [参数] [服务名称]”。<br>每个进程的进程号码值（PID）是唯一的，因此可以通过 PID 来区分不同的进程。例如，<br>可以使用如下命令来查询本机上 sshd 服务程序的 PID：<br>[root@linuxprobe ~]# pidof sshd<br>2156</p></blockquote></li><li>kill：</li></ol><blockquote><p>kill 命令用于终止某个指定 PID 的服务进程，格式为“ kill [参数] [进程 PID]”。<br>接下来，我们使用 kill 命令把上面用 pidof 命令查询到的 PID 所代表的进程终止掉，其命<br>令如下所示。这种操作的效果等同于强制停止 sshd 服务。</p></blockquote><ol start="5"><li>killall</li></ol><blockquote><p>killall 命令用于终止某个指定名称的服务所对应的全部进程，格式为：“ killall [参数] [服<br>务名称]”。<br>通常来讲，复杂软件的服务程序会有多个进程协同为用户提供服务，如果逐个去结束这<br>些进程会比较麻烦，此时可以使用 killall 命令来批量结束某个服务程序带有的全部进程。</p></blockquote><p>例如：</p><blockquote><p>[root@linuxprobe ~]# pidof httpd<br>13581 13580 13579 13578 13577 13576<br>[root@linuxprobe ~]# killall httpd<br>[root@linuxprobe ~]# pidof httpd<br>[root@linuxprobe ~]#</p></blockquote><h4 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>ifconfig</td><td>获取获取网卡配置与网络状态</td></tr><tr><td>uname</td><td>查看系统内核与系统版本（附录1）</td></tr><tr><td>uptime</td><td>系统负载（附录2）</td></tr><tr><td>free -h</td><td>用于显示当前系统中内存的使用量信息</td></tr><tr><td>who</td><td>查看当前登入主机的用户终端信息</td></tr><tr><td>history</td><td>运行的命令历史 ！+num 可以执行指定</td></tr><tr><td>history -c</td><td>　情况命令历史</td></tr></tbody></table><p>附录1</p><blockquote><p>arley@arley-PC:~/Downloads$ uname -a<br>Linux arley-PC 4.15.0-21deepin-generic #21 SMP Mon May 21 05:20:09 UTC 2018 x86_64 GNU/Linux</p></blockquote><p>附录2</p><blockquote><p>uptime 命令真的很棒，它可以显示当前系统时间、系统已运行时间、启用终端数量以<br>及平均负载值等信息。平均负载值指的是系统在最近 1 分钟、 5 分钟、 15 分钟内的压力情<br>况（下面加粗的信息部分）；负载值越低越好，尽量不要长期超过 1，在生产环境中不要超<br>过 5。</p></blockquote><p><code>Linux 系统中以点（.）开头的文件均代表隐藏文件，这些文件大多数为系统服务文件，可以用 cat 命令查看其文件内容。</code></p><h4 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>pwd</td><td>当前工作目录</td></tr><tr><td>cd -</td><td>返回上一次目录</td></tr><tr><td>cd ..</td><td>上级目录</td></tr><tr><td>cd ~</td><td>家目录</td></tr><tr><td>ls -al</td><td>查看目录下的文件及信息</td></tr></tbody></table><h4 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h4><blockquote><p>暂时用不到，省略　－　ｄｉｆｆ可以比较文本差异</p></blockquote><h4 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>touch</td><td>新建文件或者修改文件的某些参数[附录１]</td></tr><tr><td>mkdir</td><td>创建目录（附录2）</td></tr><tr><td>cp [选项] 源文件 目标文件</td><td>复制文件</td></tr><tr><td>mv [选项] 源文件 [目标路径 目标文件名]</td><td>剪切文件或将文件重命名</td></tr><tr><td>rm</td><td>删除文件</td></tr><tr><td>dd (没深入研究)</td><td>照指定大小和个数的数据块来复制文件或转换文件</td></tr><tr><td>file</td><td>查看文件类型 </td></tr></tbody></table><p>附录１</p><blockquote><p>touch -d “2017-05-04 15:44” anaconda-ks.cfg<br>-a 仅修改“读取时间”（atime）<br>-m 仅修改“修改时间”（mtime）<br>-d 同时修改 atime 与 mtime</p></blockquote><p>附录2</p><blockquote><p>在 Linux 系统中，文件夹是最常见的文件类型之一。除了能创建单个空白目录外， mkdir<br>命令还可以结合-p 参数来递归创建出具有嵌套叠层关系的文件目录。<br>mkdir -p a/b/c/d/e</p></blockquote><h4 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h4><ol><li>tar 命令用于对文件进行打包压缩或解压，格式为“ tar [选项] [文件]”。<br>在 Linux 系统中，常见的文件格式比较多，其中主要使用的是.tar 或.tar.gz 或.tar.bz2 格式</li></ol><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>创建压缩文件</td></tr><tr><td>-x</td><td>解开压缩文件</td></tr><tr><td>-t</td><td>查看压缩包内有哪些文件</td></tr><tr><td>-z</td><td>用 Gzip 压缩或解压</td></tr><tr><td>-j</td><td>用 bzip2 压缩或解压</td></tr><tr><td>-v</td><td>显示压缩或解压的过程</td></tr><tr><td>-f</td><td>目标文件名</td></tr><tr><td>-p</td><td>保留原始的权限与属性</td></tr><tr><td>-P</td><td>使用绝对路径来压缩</td></tr><tr><td>-C</td><td>指定解压到的目录</td></tr></tbody></table><p>压缩：<strong>tar -czvf 压缩包名称.tar.gz 要打包的目录</strong><br>解压：<strong>tar -xzvf 压缩包名称.tar.gz</strong></p><blockquote><p>首先， -c 参数用于创建压缩文件， -x 参数用于解压文件，因此这两个参数不能同时使用。<br>其次， -z 参数指定使用 Gzip 格式来压缩或解压文件， -j 参数指定使用 bzip2 格式来压缩或解压文件。用户使用时则是根据文件的后缀来决定应使用何种格式参数进行解压。在执行某些压缩或解压操作时，可能需要花费数个小时，如果屏幕一直没有输出，您一方面不好判断打包的进度情况，另一方面也会怀疑电脑死机了，因此非常推荐使用-v 参数向用户不断显示压缩或解压的过程。 -C 参数用于指定要解压到哪个指定的目录。 -f 参数特别重要，它必须放到参数的最后一位，代表要压缩或解压的软件包名称。一般使用“ <strong>tar -czvf 压缩包名称.tar.gz 要打包的目录</strong>”命令把指定的文件进行打包压缩；相应的解压命令为“<strong>tar -xzvf 压缩包名称.tar.gz</strong>”。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux学习笔记-1（仓库rpm和yum,apt-get）</title>
      <link href="/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1%EF%BC%88%E4%BB%93%E5%BA%93rpm%E5%92%8Cyum,apt-get%EF%BC%89/"/>
      <url>/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1%EF%BC%88%E4%BB%93%E5%BA%93rpm%E5%92%8Cyum,apt-get%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>学习参考书籍：<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">《Linux就该这么学》</a></strong></p><blockquote><p>RPM与Yum软件仓库的知识</p></blockquote><h4 id="重设root管理员密码"><a href="#重设root管理员密码" class="headerlink" title="重设root管理员密码"></a>重设root管理员密码</h4><blockquote><p>进入到系统的紧急求援模式</p><pre><code>mount -o remount,rw /sysrootchroot /sysrootpasswdtouch /.autorelabelexitreboot</code></pre></blockquote><p><strong><code>RPM是为了简化安装的复杂度，而Yum软件仓库是为了解决软件包之间的依赖关系。</code></strong></p><h4 id="RPM（红帽软件包管理器）"><a href="#RPM（红帽软件包管理器）" class="headerlink" title="RPM（红帽软件包管理器）"></a>RPM（红帽软件包管理器）</h4><blockquote><p>在RPM（红帽软件包管理器）公布之前，要想在Linux系统中安装软件只能采取源码包的方式安装。早期在Linux系统中安装程序是一件非常困难、耗费耐心的事情，而且大多数的服务程序仅仅提供源代码，需要运维人员自行编译代码并解决许多的软件依赖关系，因此要安装好一个服务程序，运维人员需要具备丰富知识、高超的技能，甚至良好的耐心。而且在安装、升级、卸载服务程序时还要考虑到其他程序、库的依赖关系，所以在进行校验、安装、卸载、查询、升级等管理软件操作时难度都非常大。<br>RPM机制则为解决这些问题而设计的。RPM有点像Windows系统中的控制面板，会建立统一的数据库文件，详细记录软件信息并能够自动分析依赖关系。目前RPM的优势已经被公众所认可，使用范围也已不局限在红帽系统中了。</p></blockquote><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>安装软件的命令格式</td><td>rpm -ivh filename.rpm</td></tr><tr><td>升级软件的命令格式</td><td>rpm -Uvh filename.rpm</td></tr><tr><td>卸载软件的命令格式</td><td>rpm -e filename.rpm</td></tr><tr><td>查询软件描述信息的命令格式</td><td>rpm -qpi filename.rpm</td></tr><tr><td>列出软件文件信息的命令格式</td><td>rpm -qpl filename.rpm</td></tr><tr><td>查询文件属于哪个RPM的命令格式</td><td>rpm -qf filename</td></tr></tbody></table><h4 id="Yum软件仓库"><a href="#Yum软件仓库" class="headerlink" title="Yum软件仓库"></a>Yum软件仓库</h4><blockquote><p>尽管RPM能够帮助用户查询软件相关的依赖关系，但问题还是要运维人员自己来解决，而有些大型软件可能与数十个程序都有依赖关系，在这种情况下安装软件会是非常痛苦的。Yum软件仓库便是为了进一步降低软件安装难度和复杂度而设计的技术。Yum软件仓库可以根据用户的要求分析出所需软件包及其相关的依赖关系，然后自动从服务器下载软件包并安装到系统。</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist all</td><td>列出所有仓库</td></tr><tr><td>yum list all</td><td>列出仓库中所有软件包</td></tr><tr><td>yum info软件包名称</td><td>查看软件包信息</td></tr><tr><td>yum install软件包名称</td><td>安装软件包</td></tr><tr><td>yum reinstall软件包名称</td><td>重新安装软件包</td></tr><tr><td>yum update软件包名称</td><td>升级软件包</td></tr><tr><td>yum remove软件包名称</td><td>移除软件包</td></tr><tr><td>yum clean all</td><td>清除所有仓库缓存</td></tr><tr><td>yum check-update</td><td>检查可更新的软件包</td></tr><tr><td>yum grouplist</td><td>查看系统中已经安装的软件包组</td></tr><tr><td>yum groupinstall软件包组</td><td>安装指定的软件包组</td></tr><tr><td>yum groupremove软件包组</td><td>移除指定的软件包组</td></tr><tr><td>yum groupinfo软件包组</td><td>查询指定的软件包组信息</td></tr></tbody></table><blockquote><p>一般来说市面上常见的Linux系统分为两大类：<br>RH类：Redhat、centOS和Fedora等<br>Debian类：ubuntu、Debian等。<br><strong>上述两类系统对应的包管理工具命令分别是yum和apt-get，而安装包类型则对应为rpm包和deb包。</strong></p></blockquote><h4 id="apg-get常用命令（Ubantu安装deb包）"><a href="#apg-get常用命令（Ubantu安装deb包）" class="headerlink" title="apg-get常用命令（Ubantu安装deb包）"></a>apg-get常用命令（Ubantu安装deb包）</h4><p>在Ubuntu下，apt-get近乎是最常用的shell命令之一了，因为他是Ubuntu通过新立得安装软件的常用工具命令。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>apt-cache search package</td><td>搜索软件包</td></tr><tr><td>apt-cache show package</td><td>获取包的相关信息，如说明、大小、版本等</td></tr><tr><td>sudo apt-get install package</td><td>安装安装包</td></tr><tr><td>sudo apt-get install package –reinstall</td><td>重新安装包</td></tr><tr><td>sudo apt-get -f install</td><td>修复安装</td></tr><tr><td>sudo apt-get remove package</td><td>删除包</td></tr><tr><td>sudo apt-get remove package –purge</td><td>删除包，包括配置文件等</td></tr><tr><td>sudo apt-get update</td><td>更新源</td></tr><tr><td>sudo apt-get upgrade</td><td>更新已安装的包</td></tr><tr><td>sudo apt-get dist-upgrade</td><td>升级系统</td></tr><tr><td>apt-cache depends package</td><td>了解使用该包依赖那些包</td></tr><tr><td>apt-cache rdepends package</td><td>查看该包被哪些包依赖</td></tr><tr><td>sudo apt-get build-dep package</td><td>安装相关的编译环境</td></tr><tr><td>apt-get source package</td><td>下载该包的源代码</td></tr><tr><td>sudo apt-get clean &amp;&amp; sudo apt-get autoclean</td><td>清理无用的包</td></tr><tr><td>sudo apt-get check</td><td>检查是否有损坏的依赖</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux学习笔记-0（linux基本理论）</title>
      <link href="/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%EF%BC%90%EF%BC%88linux%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA%EF%BC%89/"/>
      <url>/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%EF%BC%90%EF%BC%88linux%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="开源软件的特性"><a href="#开源软件的特性" class="headerlink" title="开源软件的特性"></a>开源软件的特性</h4><ol><li>低风险：使用闭源软件无疑把命运交付给他人，一旦封闭的源代码没有人来维护，你将进退维谷；而且相较于商业软件公司，开源社区很少存在倒闭的问题。</li><li>高品质：相较于闭源软件产品，开源项目通常是由开源社区来研发及维护的，参与编写、维护、测试的用户量众多，一般的bug还没有等爆发就已经被修补。</li><li>低成本：开源工作者都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。</li><li>更透明：没有哪个笨蛋会把木马、后门等放到开放的源代码中，这样无疑是把自己的罪行暴露在阳光之下。<blockquote><p>嘻嘻，是不是觉得自己的小项目开源了，就能变成大项目。</p></blockquote></li></ol><h4 id="开源许可协议整理"><a href="#开源许可协议整理" class="headerlink" title="开源许可协议整理"></a>开源许可协议整理</h4><ol><li>GNU GPL（GNU General Public License，GNU通用公共许可证）：只要软件中包含了遵循GPL协议的产品或代码，该软件就必须也遵循GPL许可协议且开源、免费，因此这个协议并不适合商用软件。遵循该协议的开源软件数量极其庞大，包括Linux系统在内的大多数的开源软件都是基于这个协议的。GPL开源许可协议最大的4个特点如下所示。</li></ol><ul><li>复制自由：允许把软件复制到任何人的电脑中，并且不限制复制的数量。</li><li>传播自由：允许软件以各种形式进行传播。</li><li>收费传播：允许在各种媒介上出售该软件，但必须提前让买家知道这个软件是可以免费获得的；因此，一般来讲，开源软件都是通过为用户提供有偿服务的形式来盈利的。</li><li>修改自由：允许开发人员增加或删除软件的功能，但软件修改后必须依然基于GPL许可协议授权。</li></ul><ol start="2"><li>BSD（Berkeley Software Distribution，伯克利软件发布版）许可协议：用户可以使用、修改和重新发布遵循该许可的软件，并且可以将软件作为商业软件发布和销售，前提是需要满足下面3个条件。</li></ol><ul><li>如果再发布的软件中包含源代码，则源代码必须继续遵循BSD许可协议。</li><li>如果再发布的软件中只有二进制程序，则需要在相关文档或版权文件中声明原始代码遵循了BSD协议。</li><li>不允许用原始软件的名字、作者名字或机构名称进行市场推广。</li></ul><ol start="3"><li>Apache许可证版本（Apache License Version）许可协议：在为开发人员提供版权及专利许可的同时，允许用户拥有修改代码及再发布的自由。该许可协议适用于商业软件，现在热门的Hadoop、Apache HTTP Server、MongoDB等项目都是基于该许可协议研发的，程序开发人员在开发遵循该协议的软件时，要严格遵守下面的4个条件。</li></ol><ul><li>该软件及其衍生品必须继续使用Apache许可协议。</li><li>如果修改了程序源代码，需要在文档中进行声明。</li><li>若软件是基于他人的源代码编写而成的，则需要保留原始代码的协议、商标、专利声明及其他原作者声明的内容信息。</li><li>如果再发布的软件中有声明文件，则需在此文件中标注Apache许可协议及其他许可协议。</li></ul><ol start="4"><li>MPL（Mozilla Public License，Mozilla公共许可）许可协议：相较于GPL许可协议，MPL更加注重对开发者的源代码需求和收益之间的平衡。</li></ol><ol start="5"><li>MIT（Massachusetts Institute of Technology）许可协议：目前限制最少的开源许可协议之一，只要程序的开发者在修改后的源代码中保留原作者的许可信息即可，因此普遍被商业软件所使用。</li></ol><h4 id="常见的Linux系统版本"><a href="#常见的Linux系统版本" class="headerlink" title="常见的Linux系统版本"></a>常见的Linux系统版本</h4><p>在介绍常见的Linux系统版本之前，首先需要区分Linux系统内核与Linux发行套件系统的不同。</p><ul><li>Linux系统内核指的是一个由Linus Torvalds负责维护，提供硬件抽象层、硬盘及文件系统控制及多任务功能的系统核心程序。</li><li>Linux发行套件系统(Linux系统)是我们常说的Linux操作系统，也即是由Linux内核与各种常用软件的集合产品。<br>全球大约有数百款的Linux系统版本，每个系统版本都有自己的特性和目标人群，下面将可以从用户的角度选出最热门的几款进行介绍。<ul><li>红帽企业版Linux（RedHat Enterprise Linux，RHEL）：红帽公司是全球最大的开源技术厂商，RHEL是全世界内使用最广泛的Linux系统。</li><li>社区企业操作系统（Community Enterprise Operating System，CentOS）：通过把RHEL系统重新编译并发布给用户免费使用的Linux系统，具有广泛的使用人群。CentOS当前已被红帽公司“收编”。</li><li>Fedora：由红帽公司发布的桌面版系统套件（目前已经不限于桌面版）。用户可免费体验到最新的技术或工具，这些技术或工具在成熟后会被加入到RHEL系统中，因此Fedora也称为RHEL系统的“试验田”。运维人员如果想时刻保持自己的技术领先，就应该多关注此类Linux系统的发展变化及新特性，不断改变自己的学习方向。</li><li>openSUSE：源自德国的一款著名的Linux系统，在全球范围内有着不错的声誉及市场占有率。</li><li>Gentoo：具有极高的自定制性，操作复杂，因此适合有经验的人员使用。</li><li>Debian：稳定性、安全性强，提供了免费的基础支持，可以良好地支持各种硬件架构，以及提供近十万种不同的开源软件，在国外拥有很高的认可度和使用率。</li><li>Ubuntu：是一款派生自Debian的操作系统，对新款硬件具有极强的兼容能力。Ubuntu与Fedora都是极其出色的Linux桌面系统，而且Ubuntu也可用于服务器领域。</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建记录(coding Pages 配合 hexo搭建博客)))</title>
      <link href="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>博客基于： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a><br>托管： <a href="https://coding.net/" target="_blank" rel="noopener">Coding Page</a><br>主题： <a href="https://material.viosey.com/docs/" target="_blank" rel="noopener">Material</a></p><h4 id="安装流程解释："><a href="#安装流程解释：" class="headerlink" title="安装流程解释："></a>安装流程解释：</h4><ol><li>安装git、nodejs（npm）.</li><li>安装下载hexo</li><li>找一个舒服的主题（可以在github上找，也可以在官网上找）</li><li>coding账号注册，生成本地公钥并添加到平台</li><li>coding创建一个公开项目，部署pages服务</li><li>hexo和主题的本地配置 （最主要的步骤）</li></ol><blockquote><p>感悟：hexo的官方文档没必要全看，基本不用看，能用到的命令不多，稍后列举，感觉他的文档是写给主题开发者看的。主要是主题和系统的主题文件的配置，下发附完整配置文件</p></blockquote><h4 id="常用的hexo命令："><a href="#常用的hexo命令：" class="headerlink" title="常用的hexo命令："></a>常用的hexo命令：</h4><ol><li>启动服务，预览效果： hexo s</li><li>清除缓存： hexo clean</li><li>生成网页文件： hexo g<br>上传到git服务： hexo d<br>先生成，再上传部署： hexo g -d</li></ol><h4 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h4><ol><li>hexo d后 ERROR Deployer not found: git</li></ol><pre><code>    npm install --save hexo-deployer-git</code></pre><ol start="2"><li>文章置顶插件</li></ol><pre><code>    npm install hexo-helper-post-top --save</code></pre><ol start="3"><li>本地站内搜索</li></ol><pre><code>    npm install hexo-generator-search --save</code></pre><blockquote><p>系统配置文件中添加：<br>    search:<br>        path: search.xml<br>        field: all</p></blockquote><ol start="4"><li>主题1.5.5+ 存在BUG，执行hexo s 和 hexo g 都有报错。</li></ol><blockquote><p>修改文件 /media/arley/数据资料/Blog/i7xy/themes/material/layout/_widget/dnsprefetch.ejs</p></blockquote><pre><code>    &lt;% } else if(theme.comment.use.startsWith(&quot;disqus&quot;)) { %&gt;    // to    &lt;% } else if(theme.comment.use &amp;&amp; theme.comment.use.startsWith(&quot;disqus&quot;)) { %&gt;</code></pre><h4 id="主题完整配置文件："><a href="#主题完整配置文件：" class="headerlink" title="主题完整配置文件："></a>主题完整配置文件：</h4><blockquote><p>themes/material/_config.yml</p></blockquote><pre><code># ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Head infohead:    favicon: &quot;/img/favicon.png&quot;    high_res_favicon: &quot;/img/logo.png&quot;    apple_touch_icon: &quot;/img/logo.png&quot;    keywords: Arley&#39;s Blog,小磊同学,郭磊博客,郭磊技术分享,小程序博客,前端技术博客    site_verification:        google:        baidu: RX4cJpJSKB    # Enable generate structured-data as JSON+LD for SEO or not.    #    Set as &#39;false&#39; if it cause some wrong when `hexo g`.    structured_data: true# Jump Links Settingsurl:    rss:    daily_pic: &quot;#&quot;    logo: &quot;#&quot;# ---------------------------------------------------------------# Style Settings# ---------------------------------------------------------------# Schemesscheme: Paradox#scheme: Isolation# UI &amp; UX: slogan, color, effectuiux:    slogan: &quot;学不思罔，思不学殆&quot;    #theme_color: &quot;#0097A7&quot;    theme_color: &quot;#619DDE&quot;    theme_sub_color: &quot;#89B6EB&quot;    hyperlink_color: &quot;#619DDE&quot;    button_color: &quot;#595959&quot;    android_chrome_color: &quot;#619DDE&quot;    nprogress_color: &quot;#29d&quot;    nprogress_buffer: &quot;800&quot;# JS Effect Switchesjs_effect:    fade: true    smoothscroll: true# Reading experiencereading:    entry_excerpt: 80# Thumbnail Settingsthumbnail:    purecolor:    random_amount: 19# Background Settings# bing available parameter:#    new | color= | type=#        color available value: black, blue, brown, green, multi, orange, pink, purple, red, white, yellow#        type available value: A (animal), C (culture), N (nature), S (space), T (travel)background:    purecolor: &quot;#f8f8f8&quot;    #bgimg: &quot;/img/bg.png&quot;    bing:        enable: false        parameter:# Images Settingsimg:    logo: &quot;/img/logo.png&quot;    avatar: &quot;/img/avatar.png&quot;    daily_pic: &quot;/img/daily_pic.jpg&quot;    sidebar_header: &quot;/img/sidebar_header.png&quot;    random_thumbnail: &quot;/img/random/material-&quot;    footer_image:        #upyun_logo:            #link: &quot;https://www.upyun.com/&quot;            #src: &quot;/img/upyun_logo.svg&quot;# Custom Fonts#    family: the font-family which will be used in the theme#    use: uri of fonts host.#        Available value: google | baomitu | ustc | custom | catnet#        - When you set as &#39;custom&#39;, you should fill in the value of &#39;custom_font_host&#39;, which should be a mirror of google fonts.#        - If you have setup your custom font-family, don&#39;t forget to add style tag with @font-face or link.tag with font css#          to /source/data/head.yml as custom code, to load custom font files.fonts:    family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, Arial, sans-serif    use: google    custom_font_host:# Card Elevation Levelcard_elevation: 2# Copyright# Specify the date when the site was setup.#    For example, if you set it as 2015, then footer will show &#39;© 2015 - 2017&#39;copyright_since: 2016# Footer Text# You can specify the text you want to show in footer, HTML tag is supported.#   For example, you can setup ICP license number as:#       &#39;&lt;a href=&quot;http://www.miitbeian.gov.cn&quot; rel=&quot;nofollow&quot;&gt;某ICP备xxxxxxxx号-x&lt;/a&gt;&#39;footer_text:# Qrcode for redirect at other device#    use: choose which method to generate the qrcode for each posts.#        Available value: plugin | online#            - When use &quot;plugin&quot;, you need to install the hexo-helper-qrcode.#            - When use &quot;online&quot;, the qrcode will be generated by &#39;pan.baidu.com&#39; in China.qrcode:    enable: true    use: plugin# Code highlight# You can only enable one of them to avoid issues.# Also you need to disable highlight option in hexo&#39;s _config.yml.##    Prettify#        theme: # Available value in /source/css/prettify/[theme].min.cssprettify:    enable: true    theme: &quot;atelier-estuary-light&quot;## theme: &quot;atelier-estuary-light&quot; #    Hanabi (https://github.com/egoist/hanabi)#        line_number: [true/false] # Show line number for code block#        includeDefaultColors: [true/false] # Use default hanabi colors#        customColors: This value accept a string or am array to setting for hanabi colors.#                    - If `includeDefaultColors` is true, this will append colors to the color pool#                    - If `includeDefaultColors` is false, this will instead default color poolhanabi:    enable: false    line_number: true    includeDefaultColors: true    customColors:# Post License# You can specify the text you want to show in the end of your posts and pages, HTML tag is supported.#   For example, you can setup a CC license as:#       &#39;This blog is under a &lt;a href=&quot;/creativecommons.html&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 Unported License&lt;/a&gt;&#39;# You can also use Front-Matter `license` to override this setting.license: &#39;本文作者：&lt;a href=&quot;https://i7xy.cn&quot; target=&quot;_blank&quot;&gt;Arley&lt;/a&gt;  &lt;br&gt;  本文采用 &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 Unported License&lt;/a&gt; 协议进行许可&#39;# Gallery Panel# You must activate Formspree before usinggallery:    panel_show: true    left_show: true    left_title: Introduction    left_info: This is a Example.    right_show: true    right_title: Get in touch# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# TOC Buttontoc:#   use: choose whether the line_number of toc will show or not.#       Available value of &quot;linenumber&quot;: true | false    linenumber: true# SNS Menusns:    email: 34805850@qq.com    facebook:    twitter:    googleplus:    weibo:    instagram:    tumblr:    github:    linkedin:    zhihu:    bilibili:    telegram:    v2ex:    segmentfault:# SNS Share Switchsns_share:    twitter: false    facebook: false    googleplus: false    weibo: true    linkedin: false    qq: true    telegram: false# Sidebar Customizesidebar:    dropdown:        Email Me:            link: &quot;mailto:34805850@qq.com&quot;            icon: email    homepage:        use: true        icon: home        divider: false    archives:        use: true        icon: inbox        divider: false    categories:        use: true        icon: chrome_reader_mode        divider: true    pages:        相册:            link: &quot;/gallery&quot;            icon: photo            divider: false        标签云:            link: &quot;/tags&quot;            icon: book            divider: false        时间轴:            link: &quot;/timeline&quot;            icon: timeline            divider: false        关于:            link: &quot;/about&quot;            icon: person            divider: false    article_num:        use: true        divider: false    footer:        divider: false        theme: false        support: false        feedback: false        material: false# ---------------------------------------------------------------# Integrated Services# ---------------------------------------------------------------# Comment Systems# Available value of &quot;use&quot;:#     disqus | disqus_click | changyan | livere | gitment | gitalk | valine | wildfire# If you want to use gitment or gitalk,you should get the client_id and client_secret from https://github.com/settings/applications/new# If you want to use valine,you should get the app_id and app_key from https://leancloud.cn ,more setting please see https://valine.js.orgcomment:    use: changyan    shortname: # duoshuo or disqus shortname    changyan_appid: cytKUOEJj    changyan_conf: prod_xxxxxxxxxxxxxxxxxxx    changyan_thread_key_type: path    livere_data_uid:    gitment_repo:   # git repo of the hexo    gitment_owner:  # git repo&#39;s owner    gitment_client_id:  # github app client id    gitment_client_secret :  # github app client secret    valine_leancloud_appId:  # leancloud application app id    valine_leancloud_appKey:  # leancloud application app key    valine_notify: false # valine mail notify (true/false) https://github.com/xCss/Valine/wiki    valine_verify: false # valine verify code (true/false)    valine_pageSize: 10 # comment list page size    valine_avatar: identicon # gravatar style https://valine.js.org/#/avatar    valine_lang: zh-cn # i18n    valine_placeholder: Just go go # valine comment input placeholder(like: Please leave your footprints )    valine_guest_info: nick,mail,link #valine comment header info    gitalk_repo: # git repo of the hexo    gitalk_owner: # git repo&#39;s owner    gitalk_client_id: # github app client id    gitalk_client_secret: # github app client secret    wildfire_database_provider: firebase # firebase or wilddog    wildfire_wilddog_site_id:    wildfire_firebase_api_key:    wildfire_firebase_auth_domain:    wildfire_firebase_database_url:    wildfire_firebase_project_id:    wildfire_firebase_storage_bucket:    wildfire_firebase_messaging_sender_id:    wildfire_theme: light # light or dark    wildfire_locale: en # en or zh-CN# Search Systems# Available value:#     swiftype | google | localsearch:    use: local    swiftype_key:# Analytics Systems# Available value:#     baidu | google | cnzzanalytics:    google_site_id:    baidu_site_id:    cnzz_site_id: 1274340778# Leancloud Viewsleancloud:    enable: false    app_id: #你的 app_id    app_key: #你的 app_key    av_core_mini: &quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js&quot;# Busuanzi 不蒜子 Viewsbusuanzi:    enable: false    all_site_uv: false    post_pv: false    busuanzi_pure_mini_js: &quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;# Files Vendors# Set a CDN for the files src you want to customize. The url should with protocol.# Default(empty) will load the files from the origin server.vendors:# MaterialCDN#   You can load theme unique files from your private cdn or oss.#   The new src will have the base domain you configured below.#   For example#       materialcdn: https://cdn.jsdelivr.net/npm/hexo-material@1.4.0/source    materialcdn:# Third party library#   You can load these files from public cdn.#   For example#       jquery: https://cdn.bootcss.com/jquery/2.2.1/jquery.js    # jQuery 2.2.0    jquery:    # nprogress 0.2.0    nprogress:    # FontAwesome 4.5.0    fontawesome:    # MathJax 2.7.0-2.7.1    mathjax:    # Prettify r298 (only prettify.js)    prettify:    # Material Icons 3.0.1    material_icons:</code></pre><h4 id="Hexo系统配置文件"><a href="#Hexo系统配置文件" class="headerlink" title="Hexo系统配置文件"></a>Hexo系统配置文件</h4><blockquote><p>hexo博客主目录/_config.yml</p></blockquote><pre><code># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Arley&#39;s Blog (小磊同学博客)subtitle: 学而不思则罔,思而不学则殆description: 小程序全栈开发者/伪极客/灵魂摄影师，热爱技术&amp;生活，很高兴能在这里与你分享我对技术和生活的思考。keywords: Arley&#39;s Blog,小磊同学,郭磊博客,郭磊技术分享,小程序博客,前端技术博客author: Arleylanguage: zh-CNtimezone:# URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: https://i7xy.cnroot: /permalink: :title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:  enable: false  line_number: true  auto_detect: false  tab_replace:# Home page setting# path: Root path for your blogs index page. (default = &#39;&#39;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &#39;&#39;  per_page: 10  order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: material# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@git.coding.net:q34805850/arleyX.git  branch: mastersearch:    path: search.xml    field: all</code></pre>]]></content>
      
      <categories>
          
          <category> 技巧备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MFC数据结构课程设计 Jg考试管理系统</title>
      <link href="/MFC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-Jg%E8%80%83%E8%AF%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/MFC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-Jg%E8%80%83%E8%AF%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="设计题目与环境"><a href="#设计题目与环境" class="headerlink" title="设计题目与环境"></a>设计题目与环境</h3><ol><li>课设主题：Jg考试系统学生端 （基于MFC实现 ，链表读取信息 + INI配置文件本地存储库）</li><li>设计内容：</li></ol><ul><li>学生用户的登录 - 本地存有500+模拟的学生信息，支持所有账号的登录验证判断。（详细请阅读概要设计）</li><li>学生信息的读取，登录成功之后获取学生的所有信息进行显示。</li><li>账号密码的修改</li><li>在题库里面随机抽取题目（两种题型，可以自定义题目数量），组合成随机试题进行显示。</li></ul><ol start="3"><li>开发环境：Microsoft Visual Studio 2017 Community（ VS2017 社区版 ）,Windows 10</li><li>备注：可执行编译程序 在 \源程序\JgManage.exe （同级目录下包含配置数据 - INI），测试账号密码：201607014334 ,默认密码是学号。</li><li>部分学习参考技术博客：</li></ol><blockquote><p>○MFC更换窗口图标 - CSDN博客<br>○基于对话框、单文档、多文档区别 - CSDN博客<br>○MFC的使用——在共享DLL中使用MFC、在静态库中使用MFC - CSDN博客<br>○黑马程序员MFC教程（已完结）<em>哔哩哔哩 (゜-゜)つロ 干杯~-bilibili<br>○MFC运行时窗口总是最小化，不直接弹出 - CSDN博客<br>○MFC中全局变量的定义及使用 - lingyun1120 - 博客园<br>○UpdateData()用法 - CSDN博客<br>○C/C++ 关于如何读写ini配置文件 （小结） - IT-渡子腾 - 博客园<br>○MFC下MD5加密算法实现 - Lxsec - 博客园<br>○c\c++中比较两个字符串或string对象是否相等 - CSDN博客<br>○MFC对话框程序按回车后程序退出的解决办法 - CSDN博客<br>○[MFC开发经验(6)] 对话框之间传递数据[TZZ]</em>百度经验<br>○c++多个文件中如何共用一个全局变量 - invisible_man - 博客园<br>○MFC中的模态对话框与非模态对话框 - xiaoluo91 - 博客园<br>○VC++ 中 int类型转换 LPCTSTR类型 几种方法 - CSDN博客<br>○VS2010/MFC编程入门之二十九（常用控件：列表视图控件List Control 下）-鸡啄米VS2010/MFC教程-鸡啄米编程课堂<br>○MFC ListControl用法 - 疯狂的癫子 - 博客园<br>○【MFC-12】VS2010/MFC之列表框控件动态编辑（List Control Edit） - CSDN博客<br>○C++将数组的元素顺序随机打乱(条件概率证明算法充分随机) - CSDN博客<br>○C++ STL标准模板库（list） - 寒魔影 - 博客园</p></blockquote><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><ol><li>文件、类及配置项解释</li><li>配置文件解释 - *.ini（本地数据存储/读写）<br>ini文件由节、键、值组成，通过文件的节和键定位到数据值。比如：<br>user.ini （用户信息存储文件）中，通过节（201607014334）和键（name）定位到值郭磊。</li></ol><p>[201607014334]<br>name=郭磊<br>password=8bcb8649d217d582b9bd9d6de365d554<br>academy=计算机学院<br>major=计算机科学与技术<br>grade=计科B163<br>sex=男<br>qq=34805850<br>type=student<br>score=0<br>[XXX]<br>name=xxx<br>………………</p><p>通过c++的GetPrivateProfileString（读配置）和WritePrivateProfileString（写配置），可以快速高效便捷的对数据进行存储。</p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><ol><li>文件列表<br><img src="https://i.imgur.com/lITGUK8.png" alt="文件列表"></li><li>运行截图</li></ol><p><img src="https://i.imgur.com/ZfM0RcK.png" alt="登录界面"><br><img src="https://i.imgur.com/RXp3yq6.png" alt="信息界面"><br><img src="https://i.imgur.com/dsVsOsy.png" alt="题目随机出题界面"></p><h3 id="完整代码下载："><a href="#完整代码下载：" class="headerlink" title="完整代码下载："></a>完整代码下载：</h3><p><a href="https://pan.baidu.com/s/1mVO0ILkDad3qmr0-6V2rMQ" title="完整代码下载" target="_blank" rel="noopener">https://pan.baidu.com/s/1mVO0ILkDad3qmr0-6V2rMQ</a></p>]]></content>
      
      <categories>
          
          <category> 课设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课设 </tag>
            
            <tag> 其他语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>汇编语言 - 课程设计（大二下）</title>
      <link href="/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/"/>
      <url>/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 实验目的"></a>一、 实验目的</h2><p>进行汇编语言程序设计应用的综合性训练。综合运用汇编语言循环程序、子程序、宏指令编程方法，提高汇编语言程序设计能力的应用水平。</p><h2 id="二、-设备与环境"><a href="#二、-设备与环境" class="headerlink" title="二、 设备与环境"></a>二、 设备与环境</h2><p>PC兼容机、Windows操作系统、汇编程序masm for windows 2015</p><h2 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h2><p>编写程序，从键盘输入某班学生的姓名、成绩，对学生的成绩进行排序，最后把姓名、学生成绩、名次显示出来。</p><h2 id="四、实验要求："><a href="#四、实验要求：" class="headerlink" title="四、实验要求："></a>四、实验要求：</h2><ol><li>本程序要求涉及汇编语言的分支、多重循环、子程序及宏，其中 成绩输入、计算学生名次、显示学生名次等都分别用子程序，也可用宏处理。</li><li>要求用菜单选择。具体要求：<ul><li>输入序号1：是数据录入并输出（包括姓名、成绩 - 多了一个学号.）；</li><li>输入序号2：是排序后的数据输出（包括姓名、成绩、名次）；</li><li>输入序号3：是可以按姓名查找某学生，并输出其成绩，选择修改或不改成绩，（此项可以选做，选做此项的加分）。</li></ul></li></ol><blockquote><p>注意：完成综合实验的最低要求是：录入不定位数的成绩并排序，所有数据录入必须有合法性判断，如成绩输入，判断成绩是否为数值，是否在0~100之间等。</p></blockquote><h2 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h2><pre><code>DATAS SEGMENT    MaxPeopleNum equ 4 //最大输入的人数    nameLen equ 10 //姓名可输入长度    scoreLen equ 4 //分数可输入长度    numLen equ 4 //学号可输入长度    debug db 10,13,&quot;#################################&quot;,10,13 //判断是否运行到    //-------------------MSG-------------------    menu db 10,13,&quot;####################################################&quot;,10,13            db  &quot;   [ Ncist Student&#39;s Score Manage BY MASM ]&quot;,10,13,&quot;You Can Input [ 1-4 ] To Choice The Function.&quot;,10,13,&quot;1. Input Student.(Name and Score)&quot;,10,13,&quot;2. Show Score Sorting result.&quot;,10,13,&quot;3. Search Score BY Name.&quot;,10,13,&quot;4. Quit The APP.&quot;,10,13,&quot;Please Input a Number:$&quot;    errorMsg db 10,13,&quot;Please Input 1-4:$&quot;    numMsg db 10,13,&quot;number:$&quot;    nameMsg db 10,13,&quot;Name:$&quot;    scoreMsg db 10,13,&quot;Score:$&quot;    continueMsg db 10,13,&quot;Whether to continue to input students(Y/N):$&quot;    lineN db 10,13,&quot;$&quot; //换行    toMax db 10,13,&quot;ERROR : To maximum input,You Can Change MaxPeopleNum To Input More.&quot;,10,13,&quot;$&quot; //达到最大存储数 count&lt;MaxPeopleNum 的提示语句    noBodyMsg db 10,13,&quot;noBody...&quot;,10,13,&quot;$&quot;    inputNameMsg db 10,13                 db &quot;Please input a name to search:$&quot;    nameScoreMsg db 10,13,&quot;The student Score is:$&quot;    notFindMsg db 10,13,&quot;Not Find The Student!&quot;,10,13,&quot;$&quot;    changeMsg db 10,13,&quot;Do you want to change the student&#39;s Score:(Y/N):$&quot;    topHead db 10,13,&quot; - -[ Report cards ]- -&quot;,10,13,&quot;number   name         score&quot;,10,13,&quot;$&quot;    T db &quot; $&quot; //空格 用来制表    ten db 10    //缓冲区有四个要点：类型，缓冲区容量，元素个数，元素。如BUF1  DB  6,？,6 DUP（？）就是说缓冲区的容量为6（第一个6），第一个问号是指用户在实际过程中输入的元素个数，但个数必须不大于5（最后一个单元被回车占用）。后面就是输入的元素。所以BUF1+1是指的第一个问号，即缓冲区中实际的元素个数。    buffName db nameLen,?,nameLen dup(?)//姓名缓冲区    buffScore db scoreLen,?,scoreLen dup(?)//成绩缓冲区    buffNum db numLen,?,numLen dup(?)//学号缓冲区 学号可输入3位    nameArr db MaxPeopleNum dup (nameLen dup (?))//一个姓名最大输入字符为10    //nameArr db 61h,9 dup (?),62h,9 dup (?),63h,9 dup (?) //a b c    scoreArr db MaxPeopleNum dup (scoreLen dup (0))//分数区间为0-100    //scoreArr db 31h,30h,30h,00h,39h,30h,00h,00h,38h,30h,00h,00h// 100 90 80    numberArr db MaxPeopleNum dup (numLen dup (0))//学号区间0-9999    count dw 0//计数       //count dw 3       comFlag db ? //搜索比较标志符    //将存为字符串的成绩转为整数型，并保存。便于冒泡排序。    i db MaxPeopleNum dup(?)DATAS ENDSSTACKS SEGMENT    //此处输入堆栈段代码STACKS ENDSCODES SEGMENT    ASSUME CS:CODES,DS:DATAS,SS:STACKS,ES:DATAS//打印字符串宏PRINT macro opr    PUSH DX    PUSH AX    LEA DX,opr    MOV AH,9    INT 21H    POP AX    POP DXendm//----------------------------//输入字符串，转存宏cinStr macro HuanChongQu,Arr    MOV AH,10    LEA DX,HuanChongQu    INT 21H    //删除末尾回车    MOV AL,HuanChongQu+1//获取输入了多少字符    ADD AL,2//输入的字符数目+2    MOV AH,0    MOV SI,AX    mov HuanChongQu[SI],0    //转存数据到非缓冲区    SUB AX,2    mov CX,AX    lea si,HuanChongQu+2    lea di,Arr    cld    rep movsbendmSTART:    MOV AX,DATAS    MOV DS,AX    MOV ES,AX    //此处输入代码段代码    //jmp searchScoreByName //测试搜索    call showMenu    jmp exit//-----------------------//显示菜单函数showMenu proc     PRINT menu    InputChoise:    MOV AH,1    INT 21H    .IF AL&lt;31H || AL&gt;34H        PRINT errorMsg        JMP InputChoise    .ENDIF    //输入1    .IF AL == 31H        jmp InputStudentInfo    .ENDIF    //输入2    .IF AL == 32H        jmp StrToInt        //jmp printAllStudent    .ENDIF    //输入3    .IF AL == 33H        mov cx,count        .IF cx&gt;0            jmp searchScoreByName        .ELSE            PRINT noBodyMsg            call showMenu        .ENDIF    .ENDIF    //输入4    .IF AL == 34H        jmp exit    .ENDIF    RETshowMenu endp//-----------------------//输入学生信息InputStudentInfo:    PRINT numMsg    MOV AX,numLen    MUL count    MOV DI,AX    cinStr buffNum,numberArr[DI]    PRINT nameMsg    MOV AX,nameLen    MUL count    MOV DI,AX    cinStr buffName,nameArr[DI]    PRINT scoreMsg    MOV AX,scoreLen    MUL count    MOV DI,AX    cinStr buffScore,scoreArr[DI]    INC count    .IF count&lt;MaxPeopleNum        PRINT continueMsg    .ELSE        PRINT toMax        call showMenu    .ENDIF    MOV AH,1    INT 21H    .IF AL==&#39;Y&#39; || AL==&#39;y&#39;        jmp InputStudentInfo    .ELSE        PRINT lineN //换行        call showMenu    .ENDIF//----------------------------------//打印当前所有学生信息printAllStudent:    PRINT topHead    //MOV CX,count //获取学生人数    MOV BX,countPrintBegin:    //当前是第几个循环    //MOV BX,CX    SUB BX,1    //PUSH CX    //打印学号    MOV CX,numLen    MOV AX,numLen    MUL BX    MOV DI,AX    PRINT T //打印空格 用来制表printNum:    MOV DL,numberArr[DI]    MOV AH,2    INT 21H    INC DI    loop printNum    //打印n个空格  让后面的名字对齐    PRINT T    PRINT T    PRINT T    PRINT T    //打印name    MOV CX,nameLen    MOV AX,nameLen    MUL BX    MOV DI,AXprintName:    MOV DL,nameArr[DI]    MOV AH,2    INT 21H    INC DI    loop printName    //打印n个空格  让后面的名字对齐    PRINT T    PRINT T    PRINT T    PRINT T    //打印Score    MOV CX,scoreLen    MOV AX,scoreLen    MUL BX    MOV DI,AXprintScore:    MOV DL,scoreArr[DI]    MOV AH,2    INT 21H    INC DI    loop printScore    PRINT lineN    //POP CX    //loop PrintBegin 太长 跳不回去了 换代码。    //SUB CX,1    CMP BX,0    JNE PrintBegin    mov si,0    mov cx,MaxPeopleNumChongZhiI:        mov i[si],00h    inc si    loop ChongZhiI                    call showMenu//--------------------------//---- StrToInt-&gt;冒泡排序-&gt;打印 //将成绩字符串转为整数型保存 //成功将字符串转整数存储到db位 整数，可用于比较排序StrToInt:    MOV CX,count    mov di,0    mov si,0    mov bl,0        .IF CX&gt;0        .WHILE CX&gt;0            //94  39h,34h,00h            .repeat                mov dl,scoreArr[di]                sub dl,30h                mov al,bl   //i[si] //----------有毒                mul ten                add al,dl                mov i[si],al                mov bl,al                inc di                mov bh,scoreArr[di]            .until bh == 00h               .repeat                   inc di                mov bh,scoreArr[di]                .until bh != 00h              mov bl,0                inc si            //inc di            dec CX        .ENDW            jmp rankIByMaoPao    .ELSE        PRINT noBodyMsg        call showMenu    .ENDIF//-------------------------------------------------//对I 进行冒泡排序，移动其他存储位置rankIByMaoPao:    mov cx,count //cx = 输入的数字  比如输入了4个数,外循环则应该循环3次  当cx&gt;0     dec cx  //cx = 3   条件 3 2 1    mov bx,0    .WHILE CX&gt;0  // 3,2,1        inc bx //当前外循环次数        mov ax,count  //ax = 4        sub ax,bx      //ax = 4 - 0 = 4        //dec ax //ax - 1        PUSH BX        PUSH CX //3        mov si,0        mov di,1        mov cx,0        .WHILE CX &lt; ax  //0 &lt; 3   //应该循环3次 0,1,2            PUSH AX            mov dh,i[si]//i 94  i            mov dl, i[di]//i+1 100            .IF dh &gt; dl  //&lt; 从小到大输出   &gt;从大到小输出                mov i[si],dl                mov i[di],dh                //学号字符串交换                PUSH CX                PUSH DX                mov cl,numLen                mov dx,0                .WHILE cl&gt;0                    push bx                    push ax                    //si = si*numLen + ch                    //di = di*numLen + ch                    mov ch,numLen                    mov ax,si                    mul ch                    add ax,dx                    PUSH SI                    mov SI,ax                    mov bh,numberArr[si]                    mov ax,di                    mul ch                    add ax,dx                    PUSH DI                    MOV DI,ax                    mov bl,numberArr[di]                    mov numberArr[si],bl                    mov numberArr[di],bh                    POP DI                    POP SI                    pop ax                    pop bx                    inc dx                    dec cl                    .ENDW                POP DX                POP CX                //-----学号排序重组完毕-------                //姓名字符串交换                PUSH CX                PUSH DX                mov cl,nameLen                mov dx,0                .WHILE cl&gt;0                    push bx                    push ax                    //si = si*numLen + ch                    //di = di*numLen + ch                    mov ch,nameLen                    mov ax,si                    mul ch                    add ax,dx                    PUSH SI                    mov SI,ax                    mov bh,nameArr[si]                    mov ax,di                    mul ch                    add ax,dx                    PUSH DI                    MOV DI,ax                    mov bl,nameArr[di]                    mov nameArr[si],bl                    mov nameArr[di],bh                    POP DI                    POP SI                    pop ax                    pop bx                    inc dx                    dec cl                    .ENDW                POP DX                POP CX                //-----姓名排序重组完毕-------                //成绩字符串交换                PUSH CX                PUSH DX                mov cl,scoreLen                mov dx,0                .WHILE cl&gt;0                    push bx                    push ax                    //si = si*numLen + ch                    //di = di*numLen + ch                    mov ch,scoreLen                    mov ax,si                    mul ch                    add ax,dx                    PUSH SI                    mov SI,ax                    mov bh,scoreArr[si]                    mov ax,di                    mul ch                    add ax,dx                    PUSH DI                    MOV DI,ax                    mov bl,scoreArr[di]                    mov scoreArr[si],bl                    mov scoreArr[di],bh                    POP DI                    POP SI                    pop ax                    pop bx                    inc dx                    dec cl                    .ENDW                POP DX                POP CX                //-----学号排序重组完毕-------            .ENDIF            inc si            inc di            inc cx            POP AX        .ENDW    POP CX    POP BX    dec CX    .ENDW    jmp printAllStudent//-------------------------------------------------searchScoreByName:    PRINT inputNameMsg    MOV AH,10    LEA DX,buffName    INT 21H    MOV DH,0    MOV DL,buffName+1//获取输入了多少字符    //输出输入了的字符数目  比如nihao = 5    //add DL,30H    //MOV AH,2    //INT 21H    //思路：第一个外循环 循环总共目前有的学生数目，即 count；内循环去进行字符串比较    mov cx,count    mov bx,0    searchBegin:        PUSH CX        PUSH BX        PUSH DX        mov comFlag,0 //初始化为0        mov bp,bx //bp        mov ax,nameLen        mul bp        mov bp,ax //----bp数组开头位置        POP DX        mov cx,dx  //输入了多少个字符        mov si,2 //输入的buff 从 第二位开始取        .WHILE cx&gt;0            mov bl,buffName[si] //输入的字符            mov bh,nameArr[bp]            .IF bl!=bh//   字符串相等,继续循环比较 ---- 字符串不相等,跳出本次比较                 mov comFlag,1                .BREAK //跳出循环,字符串不相等,cx!=0            .ENDIF            inc bp            inc si            dec cx        .ENDW        POP BX    .IF comFlag==1  //comFlag = 1为不相等        //mov dl,&#39;n&#39; //此次比较字符串不相等        //当 比较次数 BX等于count 说明比较完所有人的了        push dx        mov dx,count        dec dx        .IF bx==dx            PRINT notFindMsg            call showMenu        .ENDIF        pop dx    .ELSE        PRINT nameScoreMsg        //mov dl,&#39;y&#39; //字符串相等，记录下位置 位置为当前循环次数 BX        //获取这个人的分数        push ax        mov ax,scoreLen        mul bx        //位置在ax        push cx        MOV CX,scoreLen        MOV DI,AX    printSearchScore:        MOV DL,scoreArr[DI]        MOV AH,2        INT 21H        INC DI    loop printSearchScore        //询问是否修改        PRINT changeMsg        MOV AH,1        INT 21H        .IF AL==&#39;Y&#39; || AL==&#39;y&#39;            //要修改            PRINT scoreMsg            MOV AX,scoreLen //有一个bug  三位数成绩改成2位数 最后一个0还在            MUL bx            MOV DI,AX            cinStr buffScore,scoreArr[DI]        .ELSE            PRINT lineN //换行            call showMenu        .ENDIF        pop cx        pop ax        jmp comOver    .ENDIF        POP CX        inc bx //从0开始计次    //loop searchBegin  //多了一行代码就跳不回去了 烦躁    dec cx    cmp cx,0    jne searchBegincomOver:        call showMenuexit:    MOV AH,4CH    INT 21HCODES ENDS    END START</code></pre><blockquote><p>复制之后请替换” // “为” ; “ ,汇编语言的注释，和其他语言不同。</p></blockquote><h2 id="六、运行结果"><a href="#六、运行结果" class="headerlink" title="六、运行结果"></a>六、运行结果</h2><p><img src="https://i.imgur.com/fqTmTWN.png" alt=""><br><img src="https://i.imgur.com/1KyKGLK.png" alt=""><br><img src="https://i.imgur.com/fybCf2U.png" alt=""><br><img src="https://i.imgur.com/QAU7zmV.png" alt=""><br><img src="https://i.imgur.com/r4pqKSQ.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 课设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课设 </tag>
            
            <tag> 其他语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>https环境搭建-基于phpstudy(Apache)</title>
      <link href="/https%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8Ephpstudy-Apache/"/>
      <url>/https%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%9F%BA%E4%BA%8Ephpstudy-Apache/</url>
      <content type="html"><![CDATA[<p>编辑Apache根目录下 conf/httpd.conf 文件，<br>找到 #LoadModule ssl_module modules/mod_ssl.so 和 #Include conf/extra/httpd-ssl.conf，去掉前面的#号注释；<br>编辑Apache根目录下 conf/extra/httpd-ssl.conf 文件，修改为httpd-ssl.conf内的文本</p><p>备注：1.证书名字别太长 别带.  现在用的是123</p><blockquote><p>httpd-ssl.conf 如下</p></blockquote><pre><code>Listen 443&lt;VirtualHost *:443&gt;    DocumentRoot &quot;C:\web\apiErYa&quot;    ServerName api.alishenshen.cn    ServerAlias    SSLEngine on    SSLProtocol TLSv1 TLSv1.1 TLSv1.2    SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5    SSLCertificateFile &quot;C:\phpStudy\PHPTutorial\Apache\cert\2.crt&quot;    SSLCertificateKeyFile &quot;C:\phpStudy\PHPTutorial\Apache\cert\3.key&quot;    SSLCertificateChainFile &quot;C:\phpStudy\PHPTutorial\Apache\cert\1.crt&quot;  &lt;Directory &quot;C:\web\apiErYa&quot;&gt;      Options +Indexes +FollowSymLinks +ExecCGI      AllowOverride All      Order allow,deny      Allow from all      Require all granted  &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre>]]></content>
      
      <categories>
          
          <category> 技巧备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>Arley&#39;s Inc</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>Arley&#39;s About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>标签云</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>时间轴</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
